'use client'

import React from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { CompactPageLayout, PageHeader, CompactStats, ContentSection, EmptyState } from '@/components/shared/compact-page-layout'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Skeleton } from '@/components/ui/skeleton'
import { Input } from '@/components/ui/input'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Label } from '@/components/ui/label'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import { useFolders } from '@/hooks/use-folders'
import { FoldersToolbar } from '@/components/folders/folders-toolbar'
import { FoldersFilters, FolderFilters } from '@/components/folders/folders-filters'
import { FolderCreationForm } from '@/components/folders/folder-creation-form'
import { ModalWrapper } from '@/components/ui/modal-wrapper'
import { DocumentsToolbar } from '@/components/documents/documents-toolbar'
import { DocumentsFilters, DocumentFilters } from '@/components/documents/documents-filters'
import { DocumentPreviewModal } from '@/components/documents/document-preview-modal'
import { DocumentEditModal } from '@/components/documents/document-edit-modal'
import { DocumentShareModal } from '@/components/documents/document-share-modal'
import { UploadModal } from '@/components/upload/upload-modal'
import { DeleteConfirmationModal } from '@/components/ui/delete-confirmation-modal'
import { SuccessModal } from '@/components/ui/success-modal'
import { FolderOpen, Plus, FileText, MoreHorizontal, Edit, Trash2, Eye, ArrowLeft, Download, Share2, Upload, Send, Clock, RefreshCw } from 'lucide-react'
import { SearchSuggestion } from '@/components/ui/search-suggestions'
import { DocumentItem } from '@/types/document'
import { Folder } from '@/types/folder'
import { getFolderStatusInfo } from '@/lib/folder-status'
import { FolderStatusNavigation } from '@/components/folders/folder-status-navigation'

// Type √©tendu pour inclure numeroDossier et statut
interface FolderWithNumero extends Folder {
  numeroDossier?: string
  statut?: 'BROUILLON' | 'EN_ATTENTE' | 'VALID√â_CB' | 'REJET√â_CB' | 'VALID√â_ORDONNATEUR' | 'PAY√â' | 'TERMIN√â'
}

export default function FoldersPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const { folders, stats, isLoading, error, refresh } = useFolders()
  
  // Convertir les dossiers en FolderWithNumero pour avoir acc√®s au statut
  const foldersWithStatus = folders as FolderWithNumero[]
  
  // √âtats pour la gestion des dossiers
  const [query, setQuery] = React.useState('')
  const [open, setOpen] = React.useState(false)
  const [name, setName] = React.useState('')
  const [description, setDescription] = React.useState('')
  const [creating, setCreating] = React.useState(false)
  const [sortField, setSortField] = React.useState<'name' | 'createdAt' | 'updatedAt' | 'documentCount'>('updatedAt')
  const [sortOrder, setSortOrder] = React.useState<'asc' | 'desc'>('desc')
  const [editingFolder, setEditingFolder] = React.useState<any>(null)
  const [deleteConfirm, setDeleteConfirm] = React.useState<string | null>(null)
  
  // √âtats pour la navigation par statut
  const [statusFilter, setStatusFilter] = React.useState<'all' | 'en_attente' | 'valide' | 'rejete'>('all')

  // √âtats pour les nouveaux champs du formulaire de dossier
  const [numeroDossier, setNumeroDossier] = React.useState('')
  const [dateDepot, setDateDepot] = React.useState('')
  const [posteComptableId, setPosteComptableId] = React.useState('')
  const [numeroNature, setNumeroNature] = React.useState('')
  const [natureDocumentId, setNatureDocumentId] = React.useState('')
  const [objetOperation, setObjetOperation] = React.useState('')
  const [beneficiaire, setBeneficiaire] = React.useState('')
  
  // √âtats pour la soumission de dossiers
  const [submittingFolder, setSubmittingFolder] = React.useState<string | null>(null)
  const [submitConfirm, setSubmitConfirm] = React.useState<string | null>(null)
  
  // √âtats pour les donn√©es des dropdowns
  const [postesComptables, setPostesComptables] = React.useState<any[]>([])
  const [naturesDocuments, setNaturesDocuments] = React.useState<any[]>([])
  const [loadingData, setLoadingData] = React.useState(false)

  // √âtats pour la vue du contenu d'un dossier
  const folderId = searchParams.get('folder')
  const [currentFolder, setCurrentFolder] = React.useState<any>(null)
  const [documents, setDocuments] = React.useState<DocumentItem[]>([])
  const [filteredDocuments, setFilteredDocuments] = React.useState<DocumentItem[]>([])
  const [documentsLoading, setDocumentsLoading] = React.useState(false)
  const [documentsError, setDocumentsError] = React.useState('')

  // Gestion des suggestions de recherche
  const handleSearchSelect = (suggestion: SearchSuggestion) => {
    switch (suggestion.type) {
      case 'document':
        // Si on est dans un dossier, rechercher le document dans ce dossier
        if (folderId) {
          setQuery(suggestion.text)
        } else {
          // Sinon rediriger vers la page documents
          router.push(`/documents?search=${encodeURIComponent(suggestion.text)}`)
        }
        break
      case 'folder':
        // Rediriger vers le dossier s√©lectionn√©
        router.push(`/folders?folder=${suggestion.id.replace('folder-', '')}`)
        break
      case 'tag':
        // Ajouter le tag √† la recherche
        setQuery(suggestion.text)
        break
      case 'user':
        // Filtrer par auteur
        setQuery(suggestion.text)
        break
    }
  }
  
  // √âtats pour les documents (comme dans documents/page.tsx)
  const [documentSearchQuery, setDocumentSearchQuery] = React.useState('')
  const [documentSortField, setDocumentSortField] = React.useState<'title' | 'createdAt' | 'updatedAt' | 'fileSize' | 'fileType'>('updatedAt')
  const [documentSortOrder, setDocumentSortOrder] = React.useState<'asc' | 'desc'>('desc')
  
  // √âtats pour les modales de documents
  const [selectedDocument, setSelectedDocument] = React.useState<DocumentItem | null>(null)
  const [previewOpen, setPreviewOpen] = React.useState(false)
  const [editModalOpen, setEditModalOpen] = React.useState(false)
  const [shareModalOpen, setShareModalOpen] = React.useState(false)
  const [deleteModalOpen, setDeleteModalOpen] = React.useState(false)
  const [documentToDelete, setDocumentToDelete] = React.useState<DocumentItem | null>(null)
  const [isDeleting, setIsDeleting] = React.useState(false)

  // √âtats pour les filtres des dossiers
  const [isFiltersOpen, setIsFiltersOpen] = React.useState(false)
  const [folderFilters, setFolderFilters] = React.useState<FolderFilters>({
    sortBy: 'updatedAt',
    sortOrder: 'desc'
  })

  // √âtats pour les filtres des documents dans un dossier
  const [isDocumentFiltersOpen, setIsDocumentFiltersOpen] = React.useState(false)
  const [documentFilters, setDocumentFilters] = React.useState<DocumentFilters>({
    sortBy: 'updatedAt',
    sortOrder: 'desc'
  })

  // √âtats pour la soumission des dossiers
  const [successModalOpen, setSuccessModalOpen] = React.useState(false)
  const [submittedFolder, setSubmittedFolder] = React.useState<Folder | null>(null)

  // √âtats pour l'upload modal
  const [uploadModalOpen, setUploadModalOpen] = React.useState(false)

  // Fonction pour g√©n√©rer le num√©ro de dossier
  const generateNumeroDossier = () => {
    const year = new Date().getFullYear()
    const randomNum = Math.floor(Math.random() * 1000).toString().padStart(3, '0')
    return `DOSS-ACGE-${year}${randomNum}`
  }

  // Fonction pour charger les postes comptables
  const loadPostesComptables = async () => {
    try {
      const response = await fetch('/api/postes-comptables')
      if (response.ok) {
        const data = await response.json()
        setPostesComptables(data.postesComptables || [])
      }
    } catch (error) {
      console.error('Erreur chargement postes comptables:', error)
    }
  }

  // Fonction pour charger les natures de documents
  const loadNaturesDocuments = async () => {
    try {
      const response = await fetch('/api/natures-documents')
      if (response.ok) {
        const data = await response.json()
        setNaturesDocuments(data.naturesDocuments || [])
      }
    } catch (error) {
      console.error('Erreur chargement natures documents:', error)
    }
  }

  // Charger les donn√©es au montage du composant
  React.useEffect(() => {
    loadPostesComptables()
    loadNaturesDocuments()
  }, [])

  // Fonction pour charger les documents d'un dossier
  const loadFolderDocuments = React.useCallback(async (folderId: string) => {
    try {
      console.log('üìÅ Chargement des documents du dossier:', folderId)
      setDocumentsLoading(true)
      setDocumentsError('')
      
      // Charger les d√©tails du dossier
      console.log('üìÅ Appel API dossier:', `/api/folders/${folderId}`)
      const folderRes = await fetch(`/api/folders/${folderId}`)
      console.log('üìÅ R√©ponse API dossier:', folderRes.status, folderRes.ok)
      
      if (folderRes.ok) {
        const folderData = await folderRes.json()
        console.log('üìÅ Donn√©es dossier re√ßues:', folderData)
        setCurrentFolder(folderData.folder || folderData)
      } else {
        const errorData = await folderRes.text()
        console.error('‚ùå Erreur API dossier:', folderRes.status, errorData)
        setDocumentsError(`Erreur lors du chargement du dossier (${folderRes.status})`)
      }
      
      // Charger les documents du dossier
      console.log('üìÑ Appel API documents:', `/api/documents?folderId=${folderId}`)
      const documentsRes = await fetch(`/api/documents?folderId=${folderId}`)
      console.log('üìÑ R√©ponse API documents:', documentsRes.status, documentsRes.ok)
      
      if (documentsRes.ok) {
        const response = await documentsRes.json()
        console.log('üìÑ Donn√©es documents re√ßues:', response)
        
        // L'API retourne { documents: [...], pagination: {...} }
        const documentsArray = response.documents || []
        console.log('üìÑ Nombre de documents trouv√©s:', documentsArray.length)
        
        // Adapter les donn√©es pour correspondre √† notre interface
        const adaptedDocuments = documentsArray.map((doc: any): DocumentItem => ({
          ...doc,
          fileName: doc.fileName || doc.currentVersion?.fileName || 'document',
          fileSize: doc.fileSize || doc.currentVersion?.fileSize || 0,
          fileType: doc.fileType || doc.currentVersion?.fileType || 'unknown',
          filePath: doc.filePath || doc.currentVersion?.filePath || '',
          tags: doc.tags || [],
          author: doc.author || { id: 'unknown', name: 'Utilisateur inconnu', email: 'unknown@example.com' },
          _count: {
            comments: doc._count?.comments || 0,
            shares: doc._count?.shares || 0
          }
        }))
        setDocuments(adaptedDocuments)
        setFilteredDocuments(adaptedDocuments)
      } else {
        const errorData = await documentsRes.text()
        console.error('‚ùå Erreur API documents:', documentsRes.status, errorData)
        setDocumentsError(`Erreur lors du chargement des documents (${documentsRes.status})`)
      }
    } catch (error) {
      setDocumentsError('Erreur lors du chargement des documents')
    } finally {
      setDocumentsLoading(false)
    }
  }, [])

  // Effet pour charger les documents quand un dossier est s√©lectionn√©
  React.useEffect(() => {
    console.log('üîÑ Effet de chargement - folderId:', folderId)
    if (folderId) {
      console.log('üîÑ Chargement des documents pour le dossier:', folderId)
      loadFolderDocuments(folderId)
    } else {
      console.log('üîÑ Pas de dossier s√©lectionn√©, r√©initialisation')
      setCurrentFolder(null)
      setDocuments([])
      setFilteredDocuments([])
      setDocumentsError('')
    }
  }, [folderId, loadFolderDocuments])

  // Filtrage et tri des documents
  React.useEffect(() => {
    let filtered = documents.filter(doc => {
      // Filtrage par recherche dans la toolbar
      if (documentSearchQuery && 
          !doc.title.toLowerCase().includes(documentSearchQuery.toLowerCase()) &&
          !doc.description?.toLowerCase().includes(documentSearchQuery.toLowerCase()) &&
          !doc.fileName?.toLowerCase().includes(documentSearchQuery.toLowerCase())) {
        return false
      }

      // Filtrage par recherche dans les filtres
      if (documentFilters.search && 
          !doc.title.toLowerCase().includes(documentFilters.search.toLowerCase()) &&
          !doc.description?.toLowerCase().includes(documentFilters.search.toLowerCase()) &&
          !doc.fileName?.toLowerCase().includes(documentFilters.search.toLowerCase())) {
        return false
      }

      // Filtrage par type de fichier
      if (documentFilters.fileType && doc.fileType !== documentFilters.fileType) {
        return false
      }

      // Filtrage par taille
      if (documentFilters.minSize && (!doc.fileSize || doc.fileSize < documentFilters.minSize)) {
        return false
      }
      if (documentFilters.maxSize && (!doc.fileSize || doc.fileSize > documentFilters.maxSize)) {
        return false
      }

      // Filtrage par p√©riode
      if (documentFilters.startDate && doc.createdAt && new Date(doc.createdAt) < new Date(documentFilters.startDate)) {
        return false
      }
      if (documentFilters.endDate && doc.createdAt && new Date(doc.createdAt) > new Date(documentFilters.endDate)) {
        return false
      }

      // Filtrage par tags
      if (documentFilters.tags && documentFilters.tags.length > 0) {
        const docTags = doc.tags || []
        if (!documentFilters.tags.some(tag => docTags.some((docTag: any) => docTag === tag))) {
          return false
        }
      }

      return true
    })

    // Tri des documents
    const sortBy = documentFilters.sortBy || documentSortField
    const sortOrderValue = documentFilters.sortOrder || documentSortOrder

    filtered.sort((a, b) => {
      let aValue: any, bValue: any
      
      switch (sortBy) {
        case 'title':
          aValue = a.title.toLowerCase()
          bValue = b.title.toLowerCase()
          break
        case 'createdAt':
          aValue = a.createdAt ? new Date(a.createdAt).getTime() : 0
          bValue = b.createdAt ? new Date(b.createdAt).getTime() : 0
          break
        case 'updatedAt':
          aValue = a.updatedAt ? new Date(a.updatedAt).getTime() : 0
          bValue = b.updatedAt ? new Date(b.updatedAt).getTime() : 0
          break
        case 'fileSize':
          aValue = a.fileSize || 0
          bValue = b.fileSize || 0
          break
        case 'fileType':
          aValue = a.fileType?.toLowerCase() || ''
          bValue = b.fileType?.toLowerCase() || ''
          break
        default:
          aValue = a.updatedAt ? new Date(a.updatedAt).getTime() : 0
          bValue = b.updatedAt ? new Date(b.updatedAt).getTime() : 0
      }

      if (sortOrderValue === 'asc') {
        return aValue > bValue ? 1 : aValue < bValue ? -1 : 0
      } else {
        return aValue < bValue ? 1 : aValue > bValue ? -1 : 0
      }
    })

    setFilteredDocuments(filtered)
  }, [documents, documentSearchQuery, documentSortField, documentSortOrder, documentFilters])

  const filteredFolders = React.useMemo(() => {
    let items = (foldersWithStatus || [])

    // Filtrage par statut
    if (statusFilter !== 'all') {
      items = items.filter(f => {
        const folderStatus = f.statut
        switch (statusFilter) {
          case 'en_attente':
            return folderStatus === 'BROUILLON' || folderStatus === 'EN_ATTENTE' || !folderStatus
          case 'valide':
            return folderStatus === 'VALID√â_CB' || folderStatus === 'VALID√â_ORDONNATEUR' || folderStatus === 'PAY√â' || folderStatus === 'TERMIN√â'
          case 'rejete':
            return folderStatus === 'REJET√â_CB'
          default:
            return true
        }
      })
    }

    // Filtrage par recherche textuelle
    if (query) {
      items = items.filter(f => f.name.toLowerCase().includes(query.toLowerCase()))
    }

    // Filtrage par recherche dans les filtres
    if (folderFilters.search) {
      items = items.filter(f => 
        f.name.toLowerCase().includes(folderFilters.search!.toLowerCase()) ||
        (f.description && f.description.toLowerCase().includes(folderFilters.search!.toLowerCase()))
      )
    }

    // Filtrage par nombre de documents
    if (folderFilters.minDocuments !== undefined) {
      items = items.filter(f => (f._count?.documents || 0) >= folderFilters.minDocuments!)
    }
    if (folderFilters.maxDocuments !== undefined) {
      items = items.filter(f => (f._count?.documents || 0) <= folderFilters.maxDocuments!)
    }

    // Filtrage par p√©riode
    if (folderFilters.startDate) {
      items = items.filter(f => f.createdAt && new Date(f.createdAt) >= new Date(folderFilters.startDate!))
    }
    if (folderFilters.endDate) {
      items = items.filter(f => f.createdAt && new Date(f.createdAt) <= new Date(folderFilters.endDate!))
    }

    // Filtrage par poste comptable
    if (folderFilters.posteComptableId) {
      items = items.filter(f => (f as any).posteComptableId === folderFilters.posteComptableId)
    }

    // Filtrage par nature de document
    if (folderFilters.natureDocumentId) {
      items = items.filter(f => (f as any).natureDocumentId === folderFilters.natureDocumentId)
    }

    // Tri
    const sortBy = folderFilters.sortBy || sortField
    const sortOrderValue = folderFilters.sortOrder || sortOrder

    const getValue = (f: any) => {
      if (sortBy === 'updatedAt') return f.updatedAt ? new Date(f.updatedAt).getTime() : 0
      if (sortBy === 'createdAt') return f.createdAt ? new Date(f.createdAt).getTime() : 0
      if (sortBy === 'documentCount') return f._count?.documents || 0
      return (f.name || '').toLowerCase()
    }

    items.sort((a, b) => {
      const av = getValue(a)
      const bv = getValue(b)
      if (sortOrderValue === 'asc') return av > bv ? 1 : av < bv ? -1 : 0
      return av < bv ? 1 : av > bv ? -1 : 0
    })

    return items
  }, [foldersWithStatus, query, sortField, sortOrder, folderFilters, statusFilter])

  // Fonction pour soumettre un dossier au Contr√¥leur Budg√©taire
  const handleSubmitFolder = async (folderId: string) => {
    try {
      setSubmittingFolder(folderId)
      
      const response = await fetch(`/api/folders/${folderId}/submit`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          numeroDossier: numeroDossier || generateNumeroDossier(),
          numeroNature: numeroNature || 'NATURE-001',
          objetOperation: objetOperation || description || 'Op√©ration comptable',
          beneficiaire: beneficiaire || 'B√©n√©ficiaire √† d√©finir',
          posteComptableId: posteComptableId,
          natureDocumentId: natureDocumentId,
          secretaireId: null
        })
      })
      
      if (response.ok) {
        console.log('‚úÖ Dossier soumis avec succ√®s')
        setSubmitConfirm(null)
        if (refresh) {
          await refresh()
        }
      } else {
        const errorData = await response.json()
        console.error('‚ùå Erreur soumission:', errorData.error)
        alert('Erreur lors de la soumission: ' + (errorData.error || 'Erreur inconnue'))
      }
    } catch (error) {
      console.error('‚ùå Erreur soumission:', error)
      alert('Erreur de connexion lors de la soumission')
    } finally {
      setSubmittingFolder(null)
    }
  }

  const handleCreateFolder = async (formData?: any, e?: React.FormEvent) => {
    // Pr√©venir le comportement par d√©faut si un √©v√©nement est fourni
    if (e) {
      e.preventDefault()
    }
    
    // Si formData est fourni, utiliser les donn√©es du formulaire stepper
    const data = formData || {
      name,
      description,
      numeroDossier,
      numeroNature,
      objetOperation,
      beneficiaire,
      posteComptableId,
      natureDocumentId,
      dateDepot
    }

    if (!data.name?.trim()) return

    try {
      setCreating(true)
      console.log('üîÑ Cr√©ation dossier en cours...', data)
      
      const url = editingFolder ? `/api/folders/${editingFolder.id}` : '/api/folders'
      const method = editingFolder ? 'PUT' : 'POST'
      
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          name: data.name.trim(), 
          description: data.description?.trim() || undefined,
          numeroDossier: data.numeroDossier || generateNumeroDossier(),
          dateDepot: data.dateDepot || new Date().toISOString().split('T')[0],
          posteComptableId: data.posteComptableId || undefined,
          numeroNature: data.numeroNature || undefined,
          natureDocumentId: data.natureDocumentId || undefined,
          objetOperation: data.objetOperation || undefined,
          beneficiaire: data.beneficiaire || undefined
        })
      })
      
      console.log('üì° R√©ponse API:', res.status, res.statusText)
      
      if (res.ok) {
        const responseData = await res.json()
        console.log('‚úÖ Dossier cr√©√©:', responseData)
        
        // Le dossier est cr√©√© en statut brouillon, la soumission sera manuelle
        console.log('‚úÖ Dossier cr√©√© en statut brouillon - soumission manuelle requise')
        
        setOpen(false)
        setName('')
        setDescription('')
        setNumeroDossier('')
        setDateDepot('')
        setPosteComptableId('')
        setNumeroNature('')
        setNatureDocumentId('')
        setObjetOperation('')
        setBeneficiaire('')
        setEditingFolder(null)
        
        // Rafra√Æchir la liste des dossiers
        if (refresh) {
          await refresh()
        } else {
          console.warn('‚ö†Ô∏è Fonction refresh non disponible')
        }
      } else {
        const errorData = await res.json().catch(() => ({ error: 'Erreur inconnue' }))
        console.error('‚ùå Erreur cr√©ation dossier:', errorData)
        alert(errorData.error || 'Erreur lors de la cr√©ation du dossier')
      }
    } catch (error) {
      console.error('‚ùå Exception cr√©ation dossier:', error)
      alert('Erreur lors de la cr√©ation du dossier')
    } finally {
      setCreating(false)
    }
  }

  const handleEditFolder = React.useCallback((folder: any) => {
    setEditingFolder(folder)
    setName(folder.name)
    setDescription(folder.description || '')
    setOpen(true)
  }, [])

  const handleDeleteFolder = async (folderId: string) => {
    try {
      const res = await fetch(`/api/folders/${folderId}`, {
        method: 'DELETE'
      })
      if (res.ok) {
        await refresh()
        setDeleteConfirm(null)
      } else {
        const error = await res.json()
        alert(error.error || 'Erreur lors de la suppression')
      }
    } catch (error) {
      alert('Erreur lors de la suppression')
    }
  }

  const handleCloseDialog = (open: boolean) => {
    if (!open) {
      console.log('üîí Fermeture dialogue')
      setOpen(false)
      setEditingFolder(null)
      setName('')
      setDescription('')
      setNumeroDossier('')
      setDateDepot('')
      setPosteComptableId('')
      setNumeroNature('')
      setNatureDocumentId('')
      setObjetOperation('')
      setBeneficiaire('')
    } else {
      console.log('üîì Ouverture dialogue')
      setOpen(true)
      setEditingFolder(null)
      setName('')
      setDescription('')
      setNumeroDossier('')
      setDateDepot('')
      setPosteComptableId('')
      setNumeroNature('')
      setNatureDocumentId('')
      setObjetOperation('')
      setBeneficiaire('')
    }
  }


  // Fonctions pour la gestion des documents
  const handleViewDocument = React.useCallback((document: DocumentItem) => {
    setSelectedDocument(document)
    setPreviewOpen(true)
  }, [])

  const handleEditDocument = React.useCallback((document: DocumentItem) => {
    setSelectedDocument(document)
    setEditModalOpen(true)
  }, [])

  const handleShareDocument = React.useCallback((document: DocumentItem) => {
    setSelectedDocument(document)
    setShareModalOpen(true)
  }, [])


  const handleDownloadDocument = async (document: DocumentItem) => {
    try {
      const response = await fetch(`/api/documents/${document.id}/download`)
      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = window.document.createElement('a')
        a.href = url
        a.download = document.fileName || 'document'
        a.click()
        window.URL.revokeObjectURL(url)
      }
    } catch (error) {
      console.error('Erreur lors du t√©l√©chargement:', error)
    }
  }

  const handleDeleteDocument = (document: DocumentItem) => {
    setDocumentToDelete(document)
    setDeleteModalOpen(true)
  }

  const confirmDeleteDocument = async () => {
    if (!documentToDelete) return

    try {
      setIsDeleting(true)
      // Utiliser l'originalId (UUID de la base de donn√©es) au lieu de l'id g√©n√©r√© c√¥t√© client
      const documentId = documentToDelete.originalId || documentToDelete.id
      const response = await fetch(`/api/documents/${documentId}`, {
        method: 'DELETE',
      })
      
      if (response.ok) {
        // Recharger les documents apr√®s suppression
        if (folderId) {
          await loadFolderDocuments(folderId)
        }
        setDeleteModalOpen(false)
        setDocumentToDelete(null)
      } else {
        console.error('Erreur lors de la suppression:', await response.text())
      }
    } catch (error) {
      console.error('Erreur lors de la suppression:', error)
    } finally {
      setIsDeleting(false)
    }
  }

  // Fonction pour ouvrir un dossier
  const handleOpenFolder = React.useCallback((folder: any) => {
    console.log('üîç Tentative d\'ouverture du dossier:', folder)
    console.log('üîç ID du dossier:', folder.id)
    console.log('üîç URL de navigation:', `/folders?folder=${folder.id}`)
    router.push(`/folders?folder=${folder.id}`)
  }, [router])

  // Fonction pour revenir √† la liste des dossiers
  const handleBackToFolders = React.useCallback(() => {
    router.push('/folders')
  }, [router])


  // Fonction pour ouvrir l'upload modal
  const handleOpenUploadModal = () => {
    setUploadModalOpen(true)
  }

  // Fonction pour recharger les documents apr√®s upload
  const handleUploadSuccess = () => {
    if (folderId) {
      loadFolderDocuments(folderId)
    }
  }

  // Rendu conditionnel : soit la liste des dossiers, soit le contenu d'un dossier
  if (folderId && currentFolder) {
    return (
      <CompactPageLayout>
        {/* Header compact avec breadcrumb */}
        <PageHeader
          title={currentFolder.name}
          subtitle={currentFolder.description || 'Documents du dossier'}
          actions={
            <>
              <Button variant="outline" onClick={handleBackToFolders} className="w-full sm:w-auto h-8">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Retour
              </Button>
              <Button variant="outline" onClick={() => loadFolderDocuments(folderId)} className="w-full sm:w-auto h-8">
                <RefreshCw className="h-4 w-4" />
              </Button>
              <Button onClick={handleOpenUploadModal} className="w-full sm:w-auto h-8">
                <Upload className="h-4 w-4 mr-1" />
                Ajouter des documents
              </Button>
            </>
          }
        />

        {/* Stats compactes du dossier */}
        <CompactStats
          stats={[
            {
              label: "Documents",
              value: documents.length,
              icon: <FileText className="h-4 w-4 text-primary" />
            },
            {
              label: "Taille totale",
              value: documents.reduce((total, doc) => total + (doc.fileSize || 0), 0) > 0 
                ? <span className="text-number">{`${(documents.reduce((total, doc) => total + (doc.fileSize || 0), 0) / 1024 / 1024).toFixed(1)} MB`}</span>
                : <span className="text-number">0 MB</span>,
              icon: <FolderOpen className="h-4 w-4 text-primary" />
            },
            {
              label: "Derni√®re modification",
              value: currentFolder.updatedAt 
                ? <span className="text-date">{new Date(currentFolder.updatedAt).toLocaleDateString('fr-FR')}</span>
                : <span className="text-date">Date inconnue</span>,
              icon: <Clock className="h-4 w-4 text-primary" />
            }
          ]}
          columns={3}
        />

          {/* Barre d'outils pour les documents */}
          <DocumentsToolbar
            searchQuery={documentSearchQuery}
            onSearchQueryChange={setDocumentSearchQuery}
            sortField={documentSortField}
            sortOrder={documentSortOrder}
            onSortFieldChange={setDocumentSortField}
            onSortOrderChange={setDocumentSortOrder}
            onOpenFilters={() => setIsDocumentFiltersOpen(true)}
          />

          {/* Contenu des documents */}
          <ContentSection
            title="Documents du dossier"
            subtitle={`${documents.length} document${documents.length > 1 ? 's' : ''} dans ce dossier`}
          >
            {documentsLoading ? (
              <div className="space-y-2 p-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <Skeleton key={i} className="h-10 w-full" />
                ))}
              </div>
            ) : documentsError ? (
              <div className="text-center py-8 px-4 text-destructive">
                {documentsError}
              </div>
            ) : filteredDocuments.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Nom</TableHead>
                    <TableHead>Cat√©gorie</TableHead>
                    <TableHead>Taille</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Date de cr√©ation</TableHead>
                    <TableHead className="w-20">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredDocuments.map((document) => (
                    <TableRow key={document.id}>
                      <TableCell className="font-medium">
                        <div className="flex items-center space-x-2">
                          <FileText className="h-4 w-4 text-blue-600" />
                          <span className="truncate">
                            {document.fileName || document.title}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {document.category || 'Non class√©'}
                        </span>
                      </TableCell>
                      <TableCell>
                        {document.fileSize ? 
                          `${(document.fileSize / 1024 / 1024).toFixed(1)} MB` : 
                          'N/A'
                        }
                      </TableCell>
                      <TableCell>
                        {document.fileType || 'Type inconnu'}
                      </TableCell>
                      <TableCell>
                        {document.createdAt ? new Date(document.createdAt).toLocaleDateString('fr-FR') : 'N/A'}
                      </TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem 
                              onClick={(e) => {
                                e.stopPropagation()
                                handleViewDocument(document)
                              }}
                            >
                              <Eye className="mr-2 h-4 w-4" />
                              Voir
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={(e) => {
                                e.stopPropagation()
                                handleDownloadDocument(document)
                              }}
                            >
                              <Download className="mr-2 h-4 w-4" />
                              T√©l√©charger
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={(e) => {
                                e.stopPropagation()
                                handleShareDocument(document)
                              }}
                            >
                              <Share2 className="mr-2 h-4 w-4" />
                              Partager
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={(e) => {
                                e.stopPropagation()
                                handleEditDocument(document)
                              }}
                            >
                              <Edit className="mr-2 h-4 w-4" />
                              Modifier
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={(e) => {
                                e.stopPropagation()
                                handleDeleteDocument(document)
                              }}
                              className="text-red-600"
                            >
                              <Trash2 className="mr-2 h-4 w-4" />
                              Supprimer
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <EmptyState
                icon={<FileText className="h-10 w-10" />}
                title="Aucun document"
                description="Ce dossier ne contient aucun document."
              />
            )}
          </ContentSection>

          {/* Modales pour les documents */}
          {selectedDocument && (
            <>
              <DocumentPreviewModal
                document={selectedDocument}
                isOpen={previewOpen}
                onClose={() => setPreviewOpen(false)}
              />
              <DocumentEditModal
                document={selectedDocument}
                isOpen={editModalOpen}
                onClose={() => setEditModalOpen(false)}
                onSave={() => folderId && loadFolderDocuments(folderId)}
              />
              <DocumentShareModal
                document={selectedDocument}
                isOpen={shareModalOpen}
                onClose={() => setShareModalOpen(false)}
              />
            </>
          )}

          {/* Panneau de filtres des documents */}
          <DocumentsFilters
            isOpen={isDocumentFiltersOpen}
            onClose={() => setIsDocumentFiltersOpen(false)}
            filters={documentFilters}
            onApplyFilters={setDocumentFilters}
            folders={[]} // Pas de sous-dossiers dans cette vue
          />

          {/* Modal d'upload */}
          <UploadModal
            isOpen={uploadModalOpen}
            onClose={() => setUploadModalOpen(false)}
            folderId={folderId}
            onUploadSuccess={handleUploadSuccess}
          />
      </CompactPageLayout>
    )
  }

  // Vue par d√©faut : liste des dossiers
  return (
    <CompactPageLayout>
      {/* Header compact r√©utilisable */}
      <PageHeader
        title="Dossiers"
        subtitle={stats ? `${stats.totalFolders} dossiers, ${stats.totalDocuments} documents` : 'Chargement...'}
        actions={
          <>
            <Button variant="outline" onClick={refresh} className="w-full sm:w-auto h-8">
              <RefreshCw className="h-4 w-4" />
            </Button>
            <ModalWrapper isOpen={open} onOpenChange={handleCloseDialog}>
              <Dialog open={open} onOpenChange={handleCloseDialog}>
                <DialogTrigger asChild>
                  <Button className="w-full sm:w-auto h-8">
                    <Plus className="h-4 w-4 mr-1" />
                    Nouveau dossier
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-5xl max-h-[95vh] overflow-hidden" showCloseButton={false}>
                <DialogHeader>
                  <DialogTitle className="text-xl font-semibold">
                    {editingFolder ? 'Modifier le dossier' : 'Cr√©ation du dossier comptable'}
                  </DialogTitle>
                  <DialogDescription>
                    Remplissez les informations requises pour cr√©er un nouveau dossier comptable.
                  </DialogDescription>
                </DialogHeader>
                
                <FolderCreationForm
                  postesComptables={postesComptables}
                  naturesDocuments={naturesDocuments}
                  onSubmit={handleCreateFolder}
                  onCancel={() => setOpen(false)}
                  isLoading={creating}
                />
              </DialogContent>
            </Dialog>
            </ModalWrapper>
          </>
        }
      />

        {/* Navigation horizontale par statut */}
        <FolderStatusNavigation
          folders={folders || []}
          currentFilter={statusFilter}
          onFilterChange={setStatusFilter}
        />

        {/* Barre d'outils - Maintenant identique √† la page des fichiers */}
        <FoldersToolbar
          searchQuery={query}
          onSearchQueryChange={setQuery}
          onSearchSelect={handleSearchSelect}
          sortField={sortField}
          sortOrder={sortOrder}
          onSortFieldChange={setSortField}
          onSortOrderChange={setSortOrder}
          onOpenFilters={() => setIsFiltersOpen(true)}
        />

        {/* Stats compactes */}
        <CompactStats
          stats={[
            {
              label: "Total dossiers",
              value: stats?.totalFolders ?? 0,
              icon: <FolderOpen className="h-4 w-4 text-primary" />
            },
            {
              label: "Total documents",
              value: stats?.totalDocuments ?? 0,
              icon: <FileText className="h-4 w-4 text-primary" />
            }
          ]}
          columns={2}
        />

        {/* Liste des dossiers */}
        <ContentSection>
            {isLoading ? (
              <div className="space-y-2 p-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <Skeleton key={i} className="h-8 w-full" />
                ))}
              </div>
            ) : filteredFolders && filteredFolders.length > 0 ? (
              (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="h-8">N¬∞ Dossier</TableHead>
                      <TableHead className="h-8">Nom</TableHead>
                      <TableHead className="hidden sm:table-cell h-8">Description</TableHead>
                      <TableHead className="hidden md:table-cell h-8">√âtat</TableHead>
                      <TableHead className="hidden md:table-cell h-8">Documents</TableHead>
                      <TableHead className="hidden lg:table-cell h-8">Taille</TableHead>
                      <TableHead className="hidden xl:table-cell h-8">Cr√©√© le</TableHead>
                      <TableHead className="hidden xl:table-cell h-8">Modifi√© le</TableHead>
                      <TableHead className="w-10 sm:w-12 h-8">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredFolders.map((folder) => (
                      <TableRow 
                        key={folder.id} 
                        className="cursor-pointer hover:bg-muted/50 h-10"
                        onClick={() => handleOpenFolder(folder)}
                      >
                        <TableCell className="font-medium py-2">
                          <span className="text-xs font-mono bg-muted px-1.5 py-0.5 rounded">
                            {(folder as FolderWithNumero).numeroDossier || 'Non d√©fini'}
                          </span>
                        </TableCell>
                        <TableCell className="font-medium py-2">
                          <div className="flex items-center space-x-2">
                            <FolderOpen className="h-3 w-3 text-primary" />
                            <span className="text-sm">{folder.name}</span>
                          </div>
                        </TableCell>
                        <TableCell className="hidden sm:table-cell max-w-xs truncate text-muted-foreground py-2">
                          <span className="text-xs">{folder.description || 'Aucune description'}</span>
                        </TableCell>
                        <TableCell className="hidden md:table-cell py-2">
                          {(() => {
                            const status = (folder as FolderWithNumero).statut
                            const statusInfo = getFolderStatusInfo(status)
                            const IconComponent = statusInfo.icon
                            return (
                              <span className={`inline-flex items-center gap-1 px-1.5 py-0.5 rounded-full text-xs font-medium border ${statusInfo.color}`}>
                                <IconComponent className="h-2.5 w-2.5" />
                                {statusInfo.label}
                              </span>
                            )
                          })()}
                        </TableCell>
                        <TableCell className="hidden md:table-cell py-2">
                          <div className="flex items-center space-x-1">
                            <FileText className="h-3 w-3 text-muted-foreground" />
                            <span className="text-xs font-medium">{folder._count?.documents || 0}</span>
                          </div>
                        </TableCell>
                        <TableCell className="hidden lg:table-cell py-2">
                          <span className="text-xs text-muted-foreground">
                            {folder._count?.documents ? `${(folder._count.documents * 0.5).toFixed(1)} MB` : '0 MB'}
                          </span>
                        </TableCell>
                        <TableCell className="hidden xl:table-cell py-2">
                          <span className="text-xs text-muted-foreground">
                            {folder.createdAt ? new Date(folder.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'}
                          </span>
                        </TableCell>
                        <TableCell className="hidden xl:table-cell py-2">
                          <span className="text-xs text-muted-foreground">
                            {folder.updatedAt ? new Date(folder.updatedAt).toLocaleDateString('fr-FR') : 'Date inconnue'}
                          </span>
                        </TableCell>
                        <TableCell className="py-2">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm"
                                onClick={(e) => e.stopPropagation()}
                                className="h-6 w-6 p-0"
                              >
                                <MoreHorizontal className="w-3 h-3" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end" onClick={(e) => e.stopPropagation()}>
                              <DropdownMenuItem 
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleOpenFolder(folder)
                                }}
                              >
                                <Eye className="mr-2 h-3 w-3" />
                                Voir les documents
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleEditFolder(folder)
                                }}
                              >
                                <Edit className="mr-2 h-3 w-3" />
                                Modifier
                              </DropdownMenuItem>
                              {/* Bouton de soumission - seulement si le dossier n'est pas d√©j√† soumis */}
                              {(!folder.statut || folder.statut === 'BROUILLON' || folder.statut === 'EN_ATTENTE') && (
                                <DropdownMenuItem 
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    setSubmitConfirm(folder.id)
                                  }}
                                  className="text-blue-600"
                                >
                                  <Send className="mr-2 h-3 w-3" />
                                  Soumettre au CB
                                </DropdownMenuItem>
                              )}
                              <DropdownMenuSeparator />
                              <DropdownMenuItem 
                                onClick={(e) => {
                                  e.stopPropagation()
                                  setDeleteConfirm(folder.id)
                                }}
                                className="text-red-600"
                              >
                                <Trash2 className="mr-2 h-3 w-3" />
                                Supprimer
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )
            ) : (
              <div className="text-center py-8 px-4">
                <FolderOpen className="mx-auto h-8 w-8 text-primary" />
                <h3 className="mt-2 text-sm font-medium">Aucun dossier</h3>
                <p className="mt-1 text-xs text-muted-foreground">Cr√©ez votre premier dossier pour organiser vos documents.</p>
                <div className="mt-4">
                  <Button onClick={() => setOpen(true)} size="sm">
                    <Plus className="mr-1 h-3 w-3" />
                    Nouveau dossier
                  </Button>
                </div>
              </div>
            )}
            {error && (
              <p className="text-xs text-destructive mt-4 px-4">{error}</p>
            )}
          </ContentSection>

        {/* Dialogue de confirmation de suppression */}
        <AlertDialog open={!!deleteConfirm} onOpenChange={() => setDeleteConfirm(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>√ätes-vous s√ªr ?</AlertDialogTitle>
              <AlertDialogDescription>
                Cette action ne peut pas √™tre annul√©e. Le dossier sera d√©finitivement supprim√©.
                Assurez-vous qu'il ne contient aucun document ou sous-dossier.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Annuler</AlertDialogCancel>
              <AlertDialogAction
                onClick={() => deleteConfirm && handleDeleteFolder(deleteConfirm)}
                className="bg-red-600 hover:bg-red-700"
              >
                Supprimer
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

        {/* Dialogue de confirmation de soumission */}
        <AlertDialog open={!!submitConfirm} onOpenChange={() => setSubmitConfirm(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Soumettre le dossier</AlertDialogTitle>
              <AlertDialogDescription>
                √ätes-vous s√ªr de vouloir soumettre ce dossier au Contr√¥leur Budg√©taire ?
                Une fois soumis, le dossier passera en statut "En attente" et ne pourra plus √™tre modifi√©.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Annuler</AlertDialogCancel>
              <AlertDialogAction
                onClick={() => submitConfirm && handleSubmitFolder(submitConfirm)}
                disabled={submittingFolder === submitConfirm}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {submittingFolder === submitConfirm ? 'Soumission...' : 'Soumettre'}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

        {/* Panneau de filtres des dossiers */}
        <FoldersFilters
          isOpen={isFiltersOpen}
          onClose={() => setIsFiltersOpen(false)}
          filters={folderFilters}
          onApplyFilters={setFolderFilters}
          postesComptables={postesComptables}
          naturesDocuments={naturesDocuments}
        />


         {/* Modal de confirmation de suppression de document */}
         <DeleteConfirmationModal
           isOpen={deleteModalOpen}
           onClose={() => {
             setDeleteModalOpen(false)
             setDocumentToDelete(null)
           }}
           onConfirm={confirmDeleteDocument}
           title="Supprimer le document"
           description="√ätes-vous s√ªr de vouloir supprimer ce document ?"
           itemName={documentToDelete?.title}
           itemType="document"
           isLoading={isDeleting}
         />

         {/* Modal de succ√®s de soumission */}
         <SuccessModal
           isOpen={successModalOpen}
           onClose={() => {
             setSuccessModalOpen(false)
             setSubmittedFolder(null)
           }}
           title="Dossier soumis avec succ√®s !"
           description="Votre dossier a √©t√© transmis pour validation par le Contr√¥leur Budg√©taire."
           itemName={submittedFolder?.name}
           itemType="dossier"
           details={{
             recipient: "Contr√¥leur Budg√©taire",
             estimatedTime: "2-3 jours ouvr√©s",
             documentsCount: submittedFolder ? 1 : 0, // Vous pouvez calculer le nombre r√©el de documents
             nextSteps: [
               "Le CB va examiner votre dossier",
               "Vous recevrez une notification par email",
               "Le statut sera mis √† jour automatiquement"
             ]
           }}
         />
      </CompactPageLayout>
    )
}


