const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')
require('dotenv').config()

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function applyNotificationsMigration() {
  try {
    console.log('üîß Application de la migration notifications...')
    
    // 1. Lire le fichier de migration
    console.log('üìã 1. Lecture du fichier de migration...')
    
    const migrationPath = path.join(__dirname, 'supabase', 'migrations', '20250114000001_create_notifications_table.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')
    
    console.log('‚úÖ Fichier de migration lu')
    
    // 2. Diviser le SQL en sections pour ex√©cution s√©par√©e
    console.log('üîß 2. Ex√©cution de la migration...')
    
    // Ex√©cuter le SQL complet
    const { error: migrationError } = await supabase.rpc('exec_sql', { 
      sql: migrationSQL 
    })
    
    if (migrationError) {
      console.warn('‚ö†Ô∏è Erreur migration (peut-√™tre d√©j√† appliqu√©e):', migrationError.message)
    } else {
      console.log('‚úÖ Migration appliqu√©e avec succ√®s')
    }
    
    // 3. V√©rifier que la table existe
    console.log('üìã 3. V√©rification de la table...')
    
    const { data: tableCheck, error: tableError } = await supabase
      .from('notifications')
      .select('*')
      .limit(1)
    
    if (tableError) {
      console.error('‚ùå Table notifications non accessible:', tableError)
      return false
    }
    
    console.log('‚úÖ Table notifications accessible')
    
    // 4. Cr√©er une notification de test
    console.log('üîî 4. Cr√©ation d\'une notification de test...')
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, name, email')
      .eq('role', 'SECRETAIRE')
      .limit(1)
    
    if (usersError || !users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur secr√©taire trouv√©')
      return false
    }
    
    const testNotification = {
      user_id: users[0].id,
      title: 'Migration notifications r√©ussie',
      message: 'La table notifications a √©t√© cr√©√©e avec succ√®s. Le syst√®me de notifications intelligentes est maintenant op√©rationnel !',
      type: 'SUCCESS',
      priority: 'MEDIUM',
      action_url: '/secretaire-dashboard',
      action_label: 'Voir le dashboard'
    }
    
    const { data: insertedNotification, error: insertError } = await supabase
      .from('notifications')
      .insert(testNotification)
      .select()
    
    if (insertError) {
      console.error('‚ùå Erreur cr√©ation notification test:', insertError)
      return false
    }
    
    console.log('‚úÖ Notification de test cr√©√©e:', insertedNotification[0].id)
    
    // 5. V√©rifier les fonctions RPC
    console.log('‚öôÔ∏è 5. Test des fonctions RPC...')
    
    const { data: statsData, error: statsError } = await supabase
      .rpc('get_user_notification_stats', { user_id_param: users[0].id })
    
    if (statsError) {
      console.warn('‚ö†Ô∏è Fonction RPC stats non disponible:', statsError.message)
    } else {
      console.log('‚úÖ Fonction RPC stats fonctionne:', statsData[0])
    }
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Ex√©cuter la migration
async function main() {
  console.log('üéØ Application de la migration notifications')
  
  const success = await applyNotificationsMigration()
  
  if (success) {
    console.log('üéâ Migration appliqu√©e avec succ√®s!')
    console.log('üìã Prochaines √©tapes:')
    console.log('   1. Rafra√Æchissez votre interface secr√©taire (F5)')
    console.log('   2. Vous devriez voir la notification de migration dans la sidebar')
    console.log('   3. Testez le rejet d\'un dossier depuis l\'interface CB')
    console.log('   4. V√©rifiez que la notification appara√Æt dans l\'interface secr√©taire')
  } else {
    console.log('‚ùå √âchec de l\'application de la migration')
  }
}

main().catch(console.error)