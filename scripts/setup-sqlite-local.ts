import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

async function setupSQLiteLocal() {
  try {
    console.log('üîß Configuration de la base SQLite locale...')
    
    // √âtape 1: Cr√©er le fichier .env.local
    console.log('\nüìù √âtape 1: Cr√©ation du fichier .env.local...')
    const envContent = `# Base de donn√©es SQLite locale pour les tests
DATABASE_URL="file:./prisma/dev.db"

# NextAuth pour d√©veloppement local
NEXTAUTH_SECRET="dev-secret-key-for-local-testing"
NEXTAUTH_URL="http://localhost:3000"

# URL de base pour les API locales
NEXT_PUBLIC_API_URL="http://localhost:3000"

# Configuration upload locale
UPLOAD_MAX_SIZE="10485760"
UPLOAD_DIR="./uploads"
`
    
    const envPath = path.join(process.cwd(), '.env.local')
    fs.writeFileSync(envPath, envContent)
    console.log('‚úÖ Fichier .env.local cr√©√©')
    
    // √âtape 2: G√©n√©rer le client Prisma avec SQLite
    console.log('\nüîß √âtape 2: G√©n√©ration du client Prisma (SQLite)...')
    execSync('npx prisma generate --schema=./prisma/schema.sqlite.prisma', { stdio: 'inherit' })
    console.log('‚úÖ Client Prisma g√©n√©r√©')
    
    // √âtape 3: Cr√©er la base de donn√©es SQLite
    console.log('\nüóÑÔ∏è √âtape 3: Cr√©ation de la base de donn√©es SQLite...')
    execSync('npx prisma db push --schema=./prisma/schema.sqlite.prisma', { stdio: 'inherit' })
    console.log('‚úÖ Base de donn√©es SQLite cr√©√©e')
    
    // √âtape 4: Cr√©er un utilisateur admin
    console.log('\nüë§ √âtape 4: Cr√©ation d\'un utilisateur admin...')
    execSync('npx tsx scripts/create-admin-sqlite.ts', { stdio: 'inherit' })
    console.log('‚úÖ Utilisateur admin cr√©√©')
    
    console.log('\nüéâ Configuration SQLite locale termin√©e !')
    console.log('üöÄ Vous pouvez maintenant lancer : npm run dev')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration :', error)
  }
}

// Ex√©cuter le script
setupSQLiteLocal()
