#!/usr/bin/env node

/**
 * Script de test pour les v√©rifications ordonnateur
 * 
 * Ce script :
 * 1. Teste la r√©cup√©ration des v√©rifications ordonnateur
 * 2. Teste la validation des v√©rifications sur un dossier
 * 3. Teste l'ordonnancement avec les nouvelles v√©rifications
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env' })

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.log('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testVerificationsOrdonnateur() {
  console.log('üöÄ Test des v√©rifications ordonnateur...\n')

  try {
    // Test 1: V√©rifier que les tables existent
    console.log('1. üìã V√©rification des tables...')
    
    const { data: categories, error: categoriesError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select('*')
      .limit(5)
    
    if (categoriesError) {
      console.error('‚ùå Erreur cat√©gories:', categoriesError)
      return false
    }
    
    console.log(`‚úÖ ${categories?.length || 0} cat√©gories trouv√©es`)
    
    const { data: verifications, error: verificationsError } = await supabase
      .from('verifications_ordonnateur_types')
      .select('*')
      .limit(10)
    
    if (verificationsError) {
      console.error('‚ùå Erreur v√©rifications:', verificationsError)
      return false
    }
    
    console.log(`‚úÖ ${verifications?.length || 0} v√©rifications trouv√©es\n`)

    // Test 2: Tester la r√©cup√©ration des v√©rifications avec relations
    console.log('2. üîç Test de r√©cup√©ration des v√©rifications avec relations...')
    
    const { data: categoriesAvecVerifications, error: relationsError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select(`
        *,
        verifications:verifications_ordonnateur_types(
          id,
          nom,
          description,
          question,
          aide,
          obligatoire,
          ordre
        )
      `)
      .eq('actif', true)
      .order('ordre')
    
    if (relationsError) {
      console.error('‚ùå Erreur relations:', relationsError)
      return false
    }
    
    console.log(`‚úÖ ${categoriesAvecVerifications?.length || 0} cat√©gories avec v√©rifications`)
    
    categoriesAvecVerifications?.forEach(cat => {
      console.log(`  - ${cat.nom}: ${cat.verifications?.length || 0} v√©rifications`)
    })
    console.log()

    // Test 3: Chercher un dossier valid√© par CB pour les tests
    console.log('3. üìÅ Recherche d\'un dossier valid√© par CB...')
    
    const { data: dossiers, error: dossiersError } = await supabase
      .from('dossiers')
      .select('id, numeroDossier, statut')
      .eq('statut', 'VALID√â_CB')
      .limit(1)
    
    if (dossiersError) {
      console.error('‚ùå Erreur dossiers:', dossiersError)
      return false
    }
    
    if (!dossiers || dossiers.length === 0) {
      console.log('‚ö†Ô∏è Aucun dossier VALID√â_CB trouv√©. Cr√©ation d\'un dossier de test...')
      
      // Cr√©er un dossier de test
      const { data: nouveauDossier, error: creationError } = await supabase
        .from('dossiers')
        .insert({
          numeroDossier: 'TEST-VERIF-' + Date.now(),
          numeroNature: 'TEST-001',
          objetOperation: 'Test des v√©rifications ordonnateur',
          beneficiaire: 'Test B√©n√©ficiaire',
          dateDepot: new Date().toISOString(),
          statut: 'VALID√â_CB',
          posteComptableId: '00000000-0000-0000-0000-000000000001', // Utiliser un UUID par d√©faut
          natureDocumentId: '00000000-0000-0000-0000-000000000001',
          secretaireId: 'test-user-id'
        })
        .select()
        .single()
      
      if (creationError) {
        console.error('‚ùå Erreur cr√©ation dossier test:', creationError)
        return false
      }
      
      console.log(`‚úÖ Dossier test cr√©√©: ${nouveauDossier.numeroDossier}`)
      dossiers.push(nouveauDossier)
    } else {
      console.log(`‚úÖ Dossier trouv√©: ${dossiers[0].numeroDossier}`)
    }

    const dossierTest = dossiers[0]

    // Test 4: Tester la validation des v√©rifications
    console.log('\n4. ‚úÖ Test de validation des v√©rifications...')
    
    // Pr√©parer des validations de test
    const validationsTest = verifications?.slice(0, 5).map(verif => ({
      verification_id: verif.id,
      valide: Math.random() > 0.3, // 70% de chance d'√™tre valid√©
      commentaire: `Test validation pour ${verif.nom}`,
      piece_justificative_reference: `Pi√®ce-${Math.floor(Math.random() * 1000)}`
    })) || []
    
    // Simuler l'insertion des validations
    const { data: validationsCreees, error: validationError } = await supabase
      .from('validations_verifications_ordonnateur')
      .insert(
        validationsTest.map(validation => ({
          dossier_id: dossierTest.id,
          verification_id: validation.verification_id,
          valide: validation.valide,
          commentaire: validation.commentaire,
          piece_justificative_reference: validation.piece_justificative_reference,
          valide_par: 'test-user-id',
          valide_le: new Date().toISOString()
        }))
      )
      .select()
    
    if (validationError) {
      console.error('‚ùå Erreur validation:', validationError)
      return false
    }
    
    console.log(`‚úÖ ${validationsCreees?.length || 0} validations cr√©√©es`)

    // Test 5: Cr√©er la synth√®se
    console.log('\n5. üìä Test de cr√©ation de synth√®se...')
    
    const totalVerifications = validationsTest.length
    const verificationsValidees = validationsTest.filter(v => v.valide).length
    const verificationsRejetees = totalVerifications - verificationsValidees
    
    const { data: synthese, error: syntheseError } = await supabase
      .from('syntheses_verifications_ordonnateur')
      .upsert({
        dossier_id: dossierTest.id,
        total_verifications: totalVerifications,
        verifications_validees: verificationsValidees,
        verifications_rejetees: verificationsRejetees,
        commentaire_general: 'Test de synth√®se des v√©rifications ordonnateur',
        statut: verificationsRejetees === 0 ? 'VALID√â' : 'REJET√â',
        valide_par: 'test-user-id',
        valide_le: new Date().toISOString()
      }, {
        onConflict: 'dossier_id'
      })
      .select()
      .single()
    
    if (syntheseError) {
      console.error('‚ùå Erreur synth√®se:', syntheseError)
      return false
    }
    
    console.log(`‚úÖ Synth√®se cr√©√©e: ${synthese.statut} (${synthese.verifications_validees}/${synthese.total_verifications})`)

    // Test 6: Tester la r√©cup√©ration des validations
    console.log('\n6. üìñ Test de r√©cup√©ration des validations...')
    
    const { data: validationsRecuperees, error: recuperationError } = await supabase
      .from('validations_verifications_ordonnateur')
      .select(`
        *,
        verification:verifications_ordonnateur_types(
          *,
          categorie:categories_verifications_ordonnateur(*)
        )
      `)
      .eq('dossier_id', dossierTest.id)
    
    if (recuperationError) {
      console.error('‚ùå Erreur r√©cup√©ration:', recuperationError)
      return false
    }
    
    console.log(`‚úÖ ${validationsRecuperees?.length || 0} validations r√©cup√©r√©es avec d√©tails`)

    // Test 7: Statistiques finales
    console.log('\n7. üìà Statistiques finales...')
    
    const { data: statsCategories } = await supabase
      .from('categories_verifications_ordonnateur')
      .select('*', { count: 'exact' })
    
    const { data: statsVerifications } = await supabase
      .from('verifications_ordonnateur_types')
      .select('*', { count: 'exact' })
    
    const { data: statsValidations } = await supabase
      .from('validations_verifications_ordonnateur')
      .select('*', { count: 'exact' })
    
    const { data: statsSyntheses } = await supabase
      .from('syntheses_verifications_ordonnateur')
      .select('*', { count: 'exact' })
    
    console.log('üìä Statistiques des tables :')
    console.log(`  - Cat√©gories: ${statsCategories?.length || 0}`)
    console.log(`  - V√©rifications: ${statsVerifications?.length || 0}`)
    console.log(`  - Validations: ${statsValidations?.length || 0}`)
    console.log(`  - Synth√®ses: ${statsSyntheses?.length || 0}`)

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !')
    return true

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  console.log('\nüßπ Nettoyage des donn√©es de test...')
  
  try {
    // Supprimer les dossiers de test
    await supabase
      .from('dossiers')
      .delete()
      .like('numeroDossier', 'TEST-VERIF-%')
    
    console.log('‚úÖ Donn√©es de test nettoy√©es')
  } catch (error) {
    console.warn('‚ö†Ô∏è Erreur nettoyage:', error)
  }
}

// Ex√©cution du script
async function main() {
  const success = await testVerificationsOrdonnateur()
  
  if (success) {
    console.log('\n‚úÖ Script termin√© avec succ√®s')
    
    // Demander si on veut nettoyer
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    })
    
    readline.question('\nVoulez-vous nettoyer les donn√©es de test ? (y/N): ', async (answer) => {
      if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
        await cleanupTestData()
      }
      readline.close()
      process.exit(0)
    })
  } else {
    console.log('\n‚ùå Script termin√© avec des erreurs')
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = { testVerificationsOrdonnateur }
