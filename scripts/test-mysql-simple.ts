import { PrismaClient } from '@prisma/client'
import * as dotenv from 'dotenv'
import { readFileSync, existsSync } from 'fs'
import { join } from 'path'

// Charger les variables d'environnement depuis .env.local
const envPath = join(process.cwd(), '.env.local')
if (existsSync(envPath)) {
  const envConfig = dotenv.parse(readFileSync(envPath, 'utf8'))
  Object.assign(process.env, envConfig)
}

const prisma = new PrismaClient()

async function testConnection() {
  try {
    console.log('üîå Test de connexion √† la base de donn√©es...')
    console.log('üì° URL de connexion:', process.env.DATABASE_URL?.replace(/:[^:@]*@/, ':****@'))
    
    // Test de connexion simple
    await prisma.$connect()
    console.log('‚úÖ Connexion r√©ussie !')
    
    // Test de requ√™te simple
    const userCount = await prisma.user.count()
    console.log(`üìä Nombre d'utilisateurs dans la base : ${userCount}`)
    
    // V√©rifier l'utilisateur admin
    const adminUser = await prisma.user.findFirst({
      where: { email: 'admin@acge.local' }
    })
    
    if (adminUser) {
      console.log('‚úÖ Utilisateur admin trouv√© :', adminUser.email)
      console.log('   ID:', adminUser.id)
      console.log('   R√¥le:', adminUser.role)
    } else {
      console.log('‚ö†Ô∏è Utilisateur admin non trouv√©')
    }
    
    // Compter les autres entit√©s
    const stats = {
      documents: await prisma.document.count(),
      folders: await prisma.folder.count(),
      notifications: await prisma.notification.count()
    }
    
    console.log('\nüìä Statistiques :')
    console.log(`   - Documents: ${stats.documents}`)
    console.log(`   - Dossiers: ${stats.folders}`)
    console.log(`   - Notifications: ${stats.notifications}`)
    
  } catch (error: any) {
    console.error('‚ùå Erreur de connexion :', error.message)
    
    if (error.code === 'P1001') {
      console.log('\nüí° Solutions possibles:')
      console.log('   1. V√©rifiez que le serveur MySQL est accessible')
      console.log('   2. V√©rifiez les informations de connexion dans .env.local')
      console.log('   3. V√©rifiez que votre IP est autoris√©e dans LWS')
    }
  } finally {
    await prisma.$disconnect()
  }
}

testConnection()
