// Configuration compl√®te PostgreSQL avec v√©rification Docker
import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

async function setupPostgreSQLComplete() {
  console.log('üêò Configuration compl√®te de PostgreSQL...\n')
  
  try {
    // 1. V√©rifier Docker Desktop
    console.log('1. üê≥ V√©rification de Docker...')
    try {
      execSync('docker --version', { stdio: 'pipe' })
      console.log('   ‚úÖ Docker install√©')
      
      try {
        execSync('docker ps', { stdio: 'pipe' })
        console.log('   ‚úÖ Docker Desktop en cours d\'ex√©cution')
      } catch {
        console.log('   ‚ö†Ô∏è Docker Desktop n\'est pas d√©marr√©')
        console.log('   üí° D√©marrez Docker Desktop et relancez ce script')
        return
      }
    } catch {
      console.log('   ‚ùå Docker non install√©')
      console.log('   üí° Installez Docker Desktop depuis https://www.docker.com/products/docker-desktop')
      return
    }
    
    // 2. Arr√™ter les containers existants
    console.log('\n2. üõë Arr√™t des containers existants...')
    try {
      execSync('docker-compose down', { stdio: 'pipe' })
      console.log('   ‚úÖ Containers arr√™t√©s')
    } catch {
      console.log('   ‚ö†Ô∏è Aucun container √† arr√™ter')
    }
    
    // 3. Cr√©er le fichier .env.local pour PostgreSQL
    console.log('\n3. ‚öôÔ∏è Configuration .env.local...')
    const envPath = path.join(process.cwd(), '.env.local')
    const secretSuffix = Math.random().toString(36).substring(7)
    
    const envContent = `# Base de donn√©es PostgreSQL avec Docker
DATABASE_URL="postgresql://acge_user:acge_password_dev@localhost:5432/acge_database"

# Configuration NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="unified-jwt-secret-for-development-${secretSuffix}"

# Environment
NODE_ENV="development"

# Configuration upload
UPLOAD_MAX_SIZE="10485760"
UPLOAD_DIR="./uploads"

# Application Settings
NEXT_PUBLIC_API_URL="http://localhost:3000"
`
    
    fs.writeFileSync(envPath, envContent)
    console.log('   ‚úÖ Fichier .env.local cr√©√© pour PostgreSQL')
    
    // 4. D√©marrer PostgreSQL
    console.log('\n4. üöÄ D√©marrage de PostgreSQL...')
    try {
      execSync('docker-compose up -d postgres', { stdio: 'inherit' })
      console.log('   ‚úÖ PostgreSQL d√©marr√© en arri√®re-plan')
    } catch (error) {
      console.log('   ‚ùå Erreur lors du d√©marrage PostgreSQL:', error)
      return
    }
    
    // 5. Attendre que PostgreSQL soit pr√™t
    console.log('\n5. ‚è≥ Attente de PostgreSQL...')
    await new Promise(resolve => setTimeout(resolve, 5000))
    
    // 6. Tester la connexion
    console.log('\n6. üîç Test de connexion...')
    try {
      const { PrismaClient } = await import('@prisma/client')
      const prisma = new PrismaClient()
      
      await prisma.$connect()
      console.log('   ‚úÖ Connexion PostgreSQL r√©ussie!')
      await prisma.$disconnect()
    } catch (error) {
      console.log('   ‚ö†Ô∏è Test de connexion √©chou√©, mais PostgreSQL semble d√©marr√©')
      console.log('   üí° Continuons avec la migration...')
    }
    
    console.log('\n‚úÖ Configuration PostgreSQL termin√©e!')
    console.log('\nüîÑ √âtapes suivantes:')
    console.log('1. npm run dev (pour red√©marrer avec PostgreSQL)')
    console.log('2. npx prisma db push (pour cr√©er les tables)')
    console.log('3. npx tsx scripts/create-test-user.ts (pour cr√©er l\'admin)')
    
    console.log('\nüìä Services disponibles:')
    console.log('- Application: http://localhost:3000')
    console.log('- pgAdmin: http://localhost:8080 (admin@acge.local / admin123)')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration PostgreSQL:', error)
  }
}

setupPostgreSQLComplete().catch(console.error)
