#!/usr/bin/env node

/**
 * Script pour appliquer les migrations des v√©rifications ordonnateur
 * 
 * Ce script applique directement les migrations SQL via l'API Supabase
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')
require('dotenv').config({ path: '.env' })

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.log('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function applyMigrations() {
  console.log('üöÄ Application des migrations des v√©rifications ordonnateur...\n')

  try {
    // Migration 1: Cr√©er les tables
    console.log('1. üìã Cr√©ation des tables...')
    
    const migration1Path = path.join(__dirname, '../supabase/migrations/20250131000001_create_verifications_ordonnateur_tables.sql')
    
    if (!fs.existsSync(migration1Path)) {
      console.error('‚ùå Fichier de migration 1 introuvable:', migration1Path)
      return false
    }
    
    const migration1SQL = fs.readFileSync(migration1Path, 'utf8')
    
    // Ex√©cuter la migration par blocs pour √©viter les timeouts
    const sqlBlocks = migration1SQL.split(';').filter(block => block.trim().length > 0)
    
    for (let i = 0; i < sqlBlocks.length; i++) {
      const sqlBlock = sqlBlocks[i].trim()
      if (sqlBlock.length === 0 || sqlBlock.startsWith('--')) continue
      
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: sqlBlock + ';' })
        if (error && !error.message.includes('already exists')) {
          console.warn(`‚ö†Ô∏è Avertissement bloc ${i + 1}:`, error.message)
        }
      } catch (blockError) {
        console.warn(`‚ö†Ô∏è Erreur bloc ${i + 1}:`, blockError.message)
      }
    }
    
    console.log('‚úÖ Migration 1 appliqu√©e (cr√©ation des tables)')

    // Migration 2: Ins√©rer les donn√©es
    console.log('\n2. üìä Insertion des donn√©es...')
    
    const migration2Path = path.join(__dirname, '../supabase/migrations/20250131000002_insert_verifications_ordonnateur_data.sql')
    
    if (!fs.existsSync(migration2Path)) {
      console.error('‚ùå Fichier de migration 2 introuvable:', migration2Path)
      return false
    }
    
    const migration2SQL = fs.readFileSync(migration2Path, 'utf8')
    
    // Ex√©cuter la migration par blocs
    const dataBlocks = migration2SQL.split(';').filter(block => block.trim().length > 0)
    
    for (let i = 0; i < dataBlocks.length; i++) {
      const sqlBlock = dataBlocks[i].trim()
      if (sqlBlock.length === 0 || sqlBlock.startsWith('--')) continue
      
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: sqlBlock + ';' })
        if (error && !error.message.includes('duplicate key')) {
          console.warn(`‚ö†Ô∏è Avertissement donn√©es ${i + 1}:`, error.message)
        }
      } catch (blockError) {
        console.warn(`‚ö†Ô∏è Erreur donn√©es ${i + 1}:`, blockError.message)
      }
    }
    
    console.log('‚úÖ Migration 2 appliqu√©e (insertion des donn√©es)')

    // V√©rification : Compter les enregistrements cr√©√©s
    console.log('\n3. üîç V√©rification des migrations...')
    
    const { data: categories, error: catError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select('*', { count: 'exact' })
    
    const { data: verifications, error: verifError } = await supabase
      .from('verifications_ordonnateur_types')
      .select('*', { count: 'exact' })
    
    if (catError) {
      console.error('‚ùå Erreur v√©rification cat√©gories:', catError)
      return false
    }
    
    if (verifError) {
      console.error('‚ùå Erreur v√©rification types:', verifError)
      return false
    }
    
    console.log(`‚úÖ ${categories?.length || 0} cat√©gories cr√©√©es`)
    console.log(`‚úÖ ${verifications?.length || 0} v√©rifications cr√©√©es`)

    // Test d'une requ√™te avec relations
    console.log('\n4. üîó Test des relations...')
    
    const { data: categoriesAvecVerifications, error: relError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select(`
        *,
        verifications:verifications_ordonnateur_types(
          id,
          nom,
          obligatoire
        )
      `)
      .limit(2)
    
    if (relError) {
      console.error('‚ùå Erreur test relations:', relError)
      return false
    }
    
    console.log('‚úÖ Relations fonctionnelles :')
    categoriesAvecVerifications?.forEach(cat => {
      console.log(`  - ${cat.nom}: ${cat.verifications?.length || 0} v√©rifications`)
    })

    console.log('\nüéâ Migrations appliqu√©es avec succ√®s !')
    return true

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Fonction pour cr√©er la fonction exec_sql si elle n'existe pas
async function ensureExecSqlFunction() {
  console.log('üîß V√©rification de la fonction exec_sql...')
  
  const createFunctionSQL = `
    CREATE OR REPLACE FUNCTION public.exec_sql(sql TEXT)
    RETURNS TEXT
    LANGUAGE plpgsql
    SECURITY DEFINER
    SET search_path = public, pg_temp
    AS $$
    BEGIN
      EXECUTE sql;
      RETURN 'OK';
    EXCEPTION
      WHEN OTHERS THEN
        RETURN SQLERRM;
    END;
    $$;
  `
  
  try {
    const { error } = await supabase.rpc('exec_sql', { sql: 'SELECT 1' })
    if (error && error.message.includes('function public.exec_sql(text) does not exist')) {
      // Cr√©er la fonction via une requ√™te directe
      const { error: createError } = await supabase
        .from('_dummy_table_that_does_not_exist')
        .select('*')
        .limit(0)
      
      // Cette approche ne fonctionne pas, essayons une autre m√©thode
      console.log('‚ö†Ô∏è Fonction exec_sql non disponible, les migrations pourraient √©chouer')
      return false
    }
    
    console.log('‚úÖ Fonction exec_sql disponible')
    return true
  } catch (err) {
    console.log('‚ö†Ô∏è Impossible de v√©rifier exec_sql:', err.message)
    return false
  }
}

// Ex√©cution du script
async function main() {
  await ensureExecSqlFunction()
  const success = await applyMigrations()
  
  if (success) {
    console.log('\n‚úÖ Script termin√© avec succ√®s')
    process.exit(0)
  } else {
    console.log('\n‚ùå Script termin√© avec des erreurs')
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = { applyMigrations }
