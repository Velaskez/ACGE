const { Client } = require('pg');

async function createTablesDirect() {
  // Connexion directe √† PostgreSQL
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: false
  });

  try {
    console.log('üîß Connexion directe √† PostgreSQL...');
    await client.connect();
    console.log('‚úÖ Connexion √©tablie');

    // 1. Table UserSettings
    console.log('\nüìã Cr√©ation de la table user_settings...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "user_settings" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "emailNotifications" BOOLEAN NOT NULL DEFAULT true,
        "pushNotifications" BOOLEAN NOT NULL DEFAULT false,
        "language" TEXT NOT NULL DEFAULT 'fr',
        "timezone" TEXT NOT NULL DEFAULT 'Africa/Libreville',
        "sessionTimeout" INTEGER NOT NULL DEFAULT 15,
        "passwordExpiry" INTEGER NOT NULL DEFAULT 90,
        "theme" TEXT NOT NULL DEFAULT 'system',
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "user_settings_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('‚úÖ Table user_settings cr√©√©e');

    // 2. Table PosteComptable
    console.log('\nüìã Cr√©ation de la table postes_comptables...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "postes_comptables" (
        "id" TEXT NOT NULL,
        "numero" TEXT NOT NULL,
        "intitule" TEXT NOT NULL,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "postes_comptables_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('‚úÖ Table postes_comptables cr√©√©e');

    // 3. Table NatureDocument
    console.log('\nüìã Cr√©ation de la table natures_documents...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "natures_documents" (
        "id" TEXT NOT NULL,
        "numero" TEXT NOT NULL,
        "nom" TEXT NOT NULL,
        "description" TEXT,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "natures_documents_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('‚úÖ Table natures_documents cr√©√©e');

    // 4. Table Dossier
    console.log('\nüìã Cr√©ation de la table dossiers...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "dossiers" (
        "id" TEXT NOT NULL,
        "numeroDossier" TEXT NOT NULL,
        "dateDepot" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "numeroNature" TEXT NOT NULL,
        "objetOperation" TEXT NOT NULL,
        "beneficiaire" TEXT NOT NULL,
        "statut" TEXT NOT NULL DEFAULT 'EN_ATTENTE',
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        "posteComptableId" TEXT NOT NULL,
        "natureDocumentId" TEXT NOT NULL,
        "secretaireId" TEXT NOT NULL,
        CONSTRAINT "dossiers_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('‚úÖ Table dossiers cr√©√©e');

    // 5. Table ValidationDossier
    console.log('\nüìã Cr√©ation de la table validations_dossiers...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "validations_dossiers" (
        "id" TEXT NOT NULL,
        "statut" TEXT NOT NULL,
        "commentaire" TEXT,
        "dateValidation" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "dossierId" TEXT NOT NULL,
        "validateurId" TEXT NOT NULL,
        CONSTRAINT "validations_dossiers_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('‚úÖ Table validations_dossiers cr√©√©e');

    // Ajout des contraintes uniques
    console.log('\nüîó Ajout des contraintes uniques...');
    
    try {
      await client.query('CREATE UNIQUE INDEX IF NOT EXISTS "user_settings_userId_key" ON "user_settings"("userId")');
      console.log('‚úÖ Index user_settings_userId_key cr√©√©');
    } catch (e) {
      console.log('‚ö†Ô∏è  Index user_settings_userId_key d√©j√† existant');
    }

    try {
      await client.query('CREATE UNIQUE INDEX IF NOT EXISTS "postes_comptables_numero_key" ON "postes_comptables"("numero")');
      console.log('‚úÖ Index postes_comptables_numero_key cr√©√©');
    } catch (e) {
      console.log('‚ö†Ô∏è  Index postes_comptables_numero_key d√©j√† existant');
    }

    try {
      await client.query('CREATE UNIQUE INDEX IF NOT EXISTS "natures_documents_numero_key" ON "natures_documents"("numero")');
      console.log('‚úÖ Index natures_documents_numero_key cr√©√©');
    } catch (e) {
      console.log('‚ö†Ô∏è  Index natures_documents_numero_key d√©j√† existant');
    }

    try {
      await client.query('CREATE UNIQUE INDEX IF NOT EXISTS "dossiers_numeroDossier_key" ON "dossiers"("numeroDossier")');
      console.log('‚úÖ Index dossiers_numeroDossier_key cr√©√©');
    } catch (e) {
      console.log('‚ö†Ô∏è  Index dossiers_numeroDossier_key d√©j√† existant');
    }

    // Ajout des cl√©s √©trang√®res
    console.log('\nüîó Ajout des cl√©s √©trang√®res...');
    
    try {
      await client.query('ALTER TABLE "user_settings" ADD CONSTRAINT "user_settings_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE');
      console.log('‚úÖ FK user_settings_userId_fkey cr√©√©e');
    } catch (e) {
      console.log('‚ö†Ô∏è  FK user_settings_userId_fkey d√©j√† existante');
    }

    try {
      await client.query('ALTER TABLE "dossiers" ADD CONSTRAINT "dossiers_posteComptableId_fkey" FOREIGN KEY ("posteComptableId") REFERENCES "postes_comptables"("id") ON DELETE RESTRICT ON UPDATE CASCADE');
      console.log('‚úÖ FK dossiers_posteComptableId_fkey cr√©√©e');
    } catch (e) {
      console.log('‚ö†Ô∏è  FK dossiers_posteComptableId_fkey d√©j√† existante');
    }

    try {
      await client.query('ALTER TABLE "dossiers" ADD CONSTRAINT "dossiers_natureDocumentId_fkey" FOREIGN KEY ("natureDocumentId") REFERENCES "natures_documents"("id") ON DELETE RESTRICT ON UPDATE CASCADE');
      console.log('‚úÖ FK dossiers_natureDocumentId_fkey cr√©√©e');
    } catch (e) {
      console.log('‚ö†Ô∏è  FK dossiers_natureDocumentId_fkey d√©j√† existante');
    }

    try {
      await client.query('ALTER TABLE "dossiers" ADD CONSTRAINT "dossiers_secretaireId_fkey" FOREIGN KEY ("secretaireId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE');
      console.log('‚úÖ FK dossiers_secretaireId_fkey cr√©√©e');
    } catch (e) {
      console.log('‚ö†Ô∏è  FK dossiers_secretaireId_fkey d√©j√† existante');
    }

    try {
      await client.query('ALTER TABLE "validations_dossiers" ADD CONSTRAINT "validations_dossiers_dossierId_fkey" FOREIGN KEY ("dossierId") REFERENCES "dossiers"("id") ON DELETE CASCADE ON UPDATE CASCADE');
      console.log('‚úÖ FK validations_dossiers_dossierId_fkey cr√©√©e');
    } catch (e) {
      console.log('‚ö†Ô∏è  FK validations_dossiers_dossierId_fkey d√©j√† existante');
    }

    try {
      await client.query('ALTER TABLE "validations_dossiers" ADD CONSTRAINT "validations_dossiers_validateurId_fkey" FOREIGN KEY ("validateurId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE');
      console.log('‚úÖ FK validations_dossiers_validateurId_fkey cr√©√©e');
    } catch (e) {
      console.log('‚ö†Ô∏è  FK validations_dossiers_validateurId_fkey d√©j√† existante');
    }

    console.log('\nüéâ Toutes les tables comptables ont √©t√© cr√©√©es avec succ√®s !');

    // V√©rifier que les tables ont √©t√© cr√©√©es
    console.log('\nüîç V√©rification des tables cr√©√©es...');
    
    const result = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('user_settings', 'postes_comptables', 'natures_documents', 'dossiers', 'validations_dossiers')
      ORDER BY table_name
    `);
    
    console.log('‚úÖ Tables trouv√©es:', result.rows.map(row => row.table_name));

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des tables:', error);
  } finally {
    await client.end();
  }
}

createTablesDirect();
