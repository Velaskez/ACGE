const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

/**
 * Script pour appliquer les corrections de s√©curit√© via l'API Supabase
 * Date: 2025-01-29
 */

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement Supabase manquantes');
    console.error('V√©rifiez NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applySecurityFixes() {
    console.log('üîí Application des corrections de s√©curit√© via API Supabase...');
    console.log('==================================================');

    try {
        // 1. Correction des fonctions SQL avec search_path s√©curis√©
        console.log('üìã Correction des fonctions SQL...');
        
        const execSqlFunction = `
            CREATE OR REPLACE FUNCTION public.exec_sql(sql TEXT)
            RETURNS JSON
            LANGUAGE plpgsql
            SECURITY DEFINER
            SET search_path = public, pg_temp
            AS $$
            DECLARE
                result JSON;
                rows_affected INTEGER := 0;
            BEGIN
                -- Validation basique du SQL pour √©viter les injections
                IF sql IS NULL OR trim(sql) = '' THEN
                    RAISE EXCEPTION 'SQL ne peut pas √™tre vide';
                END IF;
                
                -- V√©rifier que ce n'est pas une commande DDL dangereuse
                IF upper(trim(sql)) LIKE 'DROP%' OR 
                   upper(trim(sql)) LIKE 'ALTER%' OR 
                   upper(trim(sql)) LIKE 'CREATE%' OR
                   upper(trim(sql)) LIKE 'GRANT%' OR
                   upper(trim(sql)) LIKE 'REVOKE%' THEN
                    RAISE EXCEPTION 'Commandes DDL non autoris√©es via cette fonction';
                END IF;
                
                -- Ex√©cuter le SQL de mani√®re s√©curis√©e
                BEGIN
                    EXECUTE sql;
                    GET DIAGNOSTICS rows_affected = ROW_COUNT;
                    
                    result := json_build_object(
                        'success', true,
                        'rows_affected', rows_affected,
                        'message', 'SQL ex√©cut√© avec succ√®s'
                    );
                    
                EXCEPTION WHEN OTHERS THEN
                    result := json_build_object(
                        'success', false,
                        'error', SQLERRM,
                        'sqlstate', SQLSTATE
                    );
                END;
                
                RETURN result;
            END;
            $$;
        `;

        const { error: execSqlError } = await supabase.rpc('exec_sql', {
            sql: execSqlFunction
        });

        if (execSqlError) {
            console.log('‚ö†Ô∏è  Fonction exec_sql d√©j√† existante ou erreur:', execSqlError.message);
        } else {
            console.log('‚úÖ Fonction exec_sql corrig√©e');
        }

        // 2. Fonction update_updated_at_column
        const updateFunction = `
            CREATE OR REPLACE FUNCTION public.update_updated_at_column()
            RETURNS TRIGGER
            LANGUAGE plpgsql
            SECURITY DEFINER
            SET search_path = public, pg_temp
            AS $$
            BEGIN
                NEW.updated_at = NOW();
                RETURN NEW;
            END;
            $$;
        `;

        const { error: updateError } = await supabase.rpc('exec_sql', {
            sql: updateFunction
        });

        if (updateError) {
            console.log('‚ö†Ô∏è  Fonction update_updated_at_column d√©j√† existante ou erreur:', updateError.message);
        } else {
            console.log('‚úÖ Fonction update_updated_at_column corrig√©e');
        }

        // 3. Fonction de v√©rification de la force des mots de passe
        const passwordStrengthFunction = `
            CREATE OR REPLACE FUNCTION check_password_strength(password TEXT)
            RETURNS TABLE(
                is_strong BOOLEAN,
                score INTEGER,
                feedback TEXT[]
            )
            LANGUAGE plpgsql
            SECURITY DEFINER
            SET search_path = public, pg_temp
            AS $$
            DECLARE
                score INTEGER := 0;
                feedback TEXT[] := ARRAY[]::TEXT[];
            BEGIN
                -- V√©rifier la longueur (minimum 8 caract√®res)
                IF length(password) >= 8 THEN
                    score := score + 1;
                ELSE
                    feedback := array_append(feedback, 'Le mot de passe doit contenir au moins 8 caract√®res');
                END IF;
                
                -- V√©rifier la pr√©sence de minuscules
                IF password ~ '[a-z]' THEN
                    score := score + 1;
                ELSE
                    feedback := array_append(feedback, 'Le mot de passe doit contenir au moins une lettre minuscule');
                END IF;
                
                -- V√©rifier la pr√©sence de majuscules
                IF password ~ '[A-Z]' THEN
                    score := score + 1;
                ELSE
                    feedback := array_append(feedback, 'Le mot de passe doit contenir au moins une lettre majuscule');
                END IF;
                
                -- V√©rifier la pr√©sence de chiffres
                IF password ~ '[0-9]' THEN
                    score := score + 1;
                ELSE
                    feedback := array_append(feedback, 'Le mot de passe doit contenir au moins un chiffre');
                END IF;
                
                -- V√©rifier la pr√©sence de caract√®res sp√©ciaux
                IF password ~ '[^a-zA-Z0-9]' THEN
                    score := score + 1;
                ELSE
                    feedback := array_append(feedback, 'Le mot de passe doit contenir au moins un caract√®re sp√©cial');
                END IF;
                
                -- V√©rifier la longueur suppl√©mentaire
                IF length(password) >= 12 THEN
                    score := score + 1;
                END IF;
                
                -- V√©rifier la longueur tr√®s longue
                IF length(password) >= 16 THEN
                    score := score + 1;
                END IF;
                
                -- D√©terminer si le mot de passe est fort (score >= 4)
                is_strong := score >= 4;
                
                -- Si le mot de passe est fort, ajouter un message positif
                IF is_strong THEN
                    feedback := array_append(feedback, 'Mot de passe fort d√©tect√©');
                END IF;
                
                RETURN QUERY SELECT is_strong, score, feedback;
            END;
            $$;
        `;

        const { error: passwordError } = await supabase.rpc('exec_sql', {
            sql: passwordStrengthFunction
        });

        if (passwordError) {
            console.log('‚ö†Ô∏è  Fonction check_password_strength d√©j√† existante ou erreur:', passwordError.message);
        } else {
            console.log('‚úÖ Fonction check_password_strength cr√©√©e');
        }

        // 4. Fonction de v√©rification de la version Postgres
        const postgresVersionFunction = `
            CREATE OR REPLACE FUNCTION check_postgres_security_status()
            RETURNS TABLE(
                version TEXT,
                version_number NUMERIC,
                is_latest BOOLEAN,
                security_recommendations TEXT[]
            )
            LANGUAGE plpgsql
            SECURITY DEFINER
            SET search_path = public, pg_temp
            AS $$
            DECLARE
                current_version TEXT;
                version_parts TEXT[];
                major_version INTEGER;
                minor_version INTEGER;
                patch_version INTEGER;
                version_numeric NUMERIC;
                recommendations TEXT[] := ARRAY[]::TEXT[];
            BEGIN
                -- R√©cup√©rer la version actuelle
                SELECT version() INTO current_version;
                
                -- Extraire les num√©ros de version
                version_parts := string_to_array(split_part(current_version, ' ', 2), '.');
                major_version := version_parts[1]::INTEGER;
                minor_version := version_parts[2]::INTEGER;
                patch_version := version_parts[3]::INTEGER;
                
                -- Cr√©er un num√©ro de version pour comparaison
                version_numeric := major_version * 10000 + minor_version * 100 + patch_version;
                
                -- V√©rifier si la version est r√©cente (Postgres 15+ recommand√©)
                is_latest := major_version >= 15;
                
                -- Ajouter des recommandations bas√©es sur la version
                IF major_version < 13 THEN
                    recommendations := array_append(recommendations, 'CRITIQUE: Mise √† jour vers Postgres 13+ requise pour les correctifs de s√©curit√©');
                ELSIF major_version < 15 THEN
                    recommendations := array_append(recommendations, 'RECOMMAND√â: Mise √† jour vers Postgres 15+ pour les derni√®res fonctionnalit√©s de s√©curit√©');
                ELSIF major_version < 16 THEN
                    recommendations := array_append(recommendations, 'OPTIONNEL: Mise √† jour vers Postgres 16+ pour les am√©liorations de performance');
                ELSE
                    recommendations := array_append(recommendations, 'EXCELLENT: Version Postgres r√©cente et s√©curis√©e');
                END IF;
                
                RETURN QUERY SELECT 
                    current_version,
                    version_numeric,
                    is_latest,
                    recommendations;
            END;
            $$;
        `;

        const { error: versionError } = await supabase.rpc('exec_sql', {
            sql: postgresVersionFunction
        });

        if (versionError) {
            console.log('‚ö†Ô∏è  Fonction check_postgres_security_status d√©j√† existante ou erreur:', versionError.message);
        } else {
            console.log('‚úÖ Fonction check_postgres_security_status cr√©√©e');
        }

        // 5. Test des fonctions cr√©√©es
        console.log('\nüß™ Test des fonctions de s√©curit√©...');
        
        // Tester la v√©rification de la force des mots de passe
        const { data: passwordTest, error: passwordTestError } = await supabase.rpc('check_password_strength', {
            password: 'TestPassword123!'
        });

        if (passwordTestError) {
            console.log('‚ö†Ô∏è  Erreur lors du test de check_password_strength:', passwordTestError.message);
        } else {
            console.log('‚úÖ Test de check_password_strength r√©ussi:', passwordTest);
        }

        // Tester la v√©rification de la version Postgres
        const { data: versionTest, error: versionTestError } = await supabase.rpc('check_postgres_security_status');

        if (versionTestError) {
            console.log('‚ö†Ô∏è  Erreur lors du test de check_postgres_security_status:', versionTestError.message);
        } else {
            console.log('‚úÖ Test de check_postgres_security_status r√©ussi:', versionTest);
        }

        console.log('\n‚úÖ Corrections de s√©curit√© appliqu√©es avec succ√®s!');
        console.log('\nüìã R√©sum√© des corrections:');
        console.log('  ‚úÖ Fonctions SQL corrig√©es avec search_path s√©curis√©');
        console.log('  ‚úÖ Fonction de v√©rification de la force des mots de passe');
        console.log('  ‚úÖ Fonction de v√©rification de la version Postgres');
        console.log('\n‚ö†Ô∏è  Actions manuelles requises:');
        console.log('  1. V√©rifiez le Security Advisor dans le dashboard Supabase');
        console.log('  2. Configurez les param√®tres OTP dans Auth > Settings');
        console.log('  3. Testez les nouvelles fonctionnalit√©s de s√©curit√©');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'application des corrections:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter le script
applySecurityFixes();
