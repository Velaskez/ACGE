#!/usr/bin/env node

/**
 * Script pour ajouter les contraintes de cl√© √©trang√®re manquantes
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function addForeignKeys() {
  console.log('üîó Ajout des contraintes de cl√© √©trang√®re...\n')

  try {
    // 1. Ajouter la contrainte sur verifications_ordonnateur_types
    console.log('1. üîó Ajout de la contrainte categorie_id...')
    
    const addCategorieFK = `
      ALTER TABLE verifications_ordonnateur_types 
      ADD CONSTRAINT fk_verifications_ordonnateur_categorie 
      FOREIGN KEY (categorie_id) 
      REFERENCES categories_verifications_ordonnateur(id) 
      ON DELETE CASCADE
    `
    
    const { error: fkError1 } = await supabase.rpc('exec_sql', { sql: addCategorieFK })
    if (fkError1 && !fkError1.message.includes('already exists')) {
      console.error('‚ùå Erreur contrainte categorie:', fkError1)
    } else {
      console.log('‚úÖ Contrainte categorie_id ajout√©e')
    }

    // 2. Ajouter la contrainte sur validations_verifications_ordonnateur pour verification_id
    console.log('\n2. üîó Ajout de la contrainte verification_id...')
    
    const addVerificationFK = `
      ALTER TABLE validations_verifications_ordonnateur 
      ADD CONSTRAINT fk_validations_verification 
      FOREIGN KEY (verification_id) 
      REFERENCES verifications_ordonnateur_types(id) 
      ON DELETE CASCADE
    `
    
    const { error: fkError2 } = await supabase.rpc('exec_sql', { sql: addVerificationFK })
    if (fkError2 && !fkError2.message.includes('already exists')) {
      console.error('‚ùå Erreur contrainte verification:', fkError2)
    } else {
      console.log('‚úÖ Contrainte verification_id ajout√©e')
    }

    // 3. Ajouter la contrainte sur validations_verifications_ordonnateur pour dossier_id
    console.log('\n3. üîó Ajout de la contrainte dossier_id...')
    
    const addDossierFK = `
      ALTER TABLE validations_verifications_ordonnateur 
      ADD CONSTRAINT fk_validations_dossier 
      FOREIGN KEY (dossier_id) 
      REFERENCES dossiers(id) 
      ON DELETE CASCADE
    `
    
    const { error: fkError3 } = await supabase.rpc('exec_sql', { sql: addDossierFK })
    if (fkError3 && !fkError3.message.includes('already exists')) {
      console.error('‚ùå Erreur contrainte dossier:', fkError3)
    } else {
      console.log('‚úÖ Contrainte dossier_id ajout√©e')
    }

    // 4. Ajouter la contrainte sur syntheses_verifications_ordonnateur pour dossier_id
    console.log('\n4. üîó Ajout de la contrainte synthese dossier_id...')
    
    const addSyntheseDossierFK = `
      ALTER TABLE syntheses_verifications_ordonnateur 
      ADD CONSTRAINT fk_syntheses_dossier 
      FOREIGN KEY (dossier_id) 
      REFERENCES dossiers(id) 
      ON DELETE CASCADE
    `
    
    const { error: fkError4 } = await supabase.rpc('exec_sql', { sql: addSyntheseDossierFK })
    if (fkError4 && !fkError4.message.includes('already exists')) {
      console.error('‚ùå Erreur contrainte synthese dossier:', fkError4)
    } else {
      console.log('‚úÖ Contrainte synthese dossier_id ajout√©e')
    }

    // 5. Ins√©rer maintenant les v√©rifications compl√®tes
    console.log('\n5. üìä Insertion des v√©rifications compl√®tes...')
    
    const verifications = [
      // V√©rifications de L√©galit√©
      {
        id: '11000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000001',
        nom: 'Habilitation des autorit√©s administratives',
        description: 'V√©rifier que l\'autorit√© qui a initi√© la demande est habilit√©e √† le faire',
        question: 'L\'autorit√© administrative qui a initi√© cette demande est-elle habilit√©e √† le faire ?',
        aide: 'V√©rifiez les d√©l√©gations de pouvoir, les limites de comp√©tence et les habilitations en vigueur.',
        obligatoire: true,
        ordre: 1
      },
      {
        id: '11000000-0000-0000-0000-000000000002',
        categorie_id: '10000000-0000-0000-0000-000000000001',
        nom: 'Validit√© des d√©l√©gations de pouvoir',
        description: 'Contr√¥ler la validit√© et les limites des d√©l√©gations accord√©es',
        question: 'Les d√©l√©gations de pouvoir sont-elles valides et dans les limites autoris√©es ?',
        aide: 'V√©rifiez les actes de d√©l√©gation, leur dur√©e de validit√© et les montants autoris√©s.',
        obligatoire: true,
        ordre: 2
      },
      {
        id: '11000000-0000-0000-0000-000000000003',
        categorie_id: '10000000-0000-0000-0000-000000000001',
        nom: 'Conformit√© aux textes l√©gaux',
        description: 'V√©rifier la conformit√© de l\'op√©ration aux textes l√©gaux et r√©glementaires',
        question: 'L\'op√©ration est-elle conforme aux textes l√©gaux et r√©glementaires en vigueur ?',
        aide: 'Consultez les lois, d√©crets et arr√™t√©s applicables √† ce type d\'op√©ration.',
        obligatoire: true,
        ordre: 3
      },
      
      // V√©rifications de Service Fait
      {
        id: '12000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000002',
        nom: 'Justification du service rendu',
        description: 'V√©rifier que le service a bien √©t√© rendu conform√©ment aux sp√©cifications',
        question: 'Le service a-t-il √©t√© rendu conform√©ment aux sp√©cifications ?',
        aide: 'Examinez les preuves de r√©alisation : rapports, proc√®s-verbaux, attestations.',
        obligatoire: true,
        ordre: 1
      },
      {
        id: '12000000-0000-0000-0000-000000000002',
        categorie_id: '10000000-0000-0000-0000-000000000002',
        nom: 'Validit√© de la certification',
        description: 'Contr√¥ler l\'authenticit√© et la validit√© des certifications fournies',
        question: 'Les certifications fournies sont-elles authentiques et valides ?',
        aide: 'V√©rifiez les signatures, cachets et dates de validit√© des certificats.',
        obligatoire: true,
        ordre: 2
      },
      
      // V√©rifications de Montants
      {
        id: '13000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000003',
        nom: 'Coh√©rence des montants entre documents',
        description: 'V√©rifier la coh√©rence des montants entre tous les documents du dossier',
        question: 'Les montants sont-ils coh√©rents entre tous les documents du dossier ?',
        aide: 'Comparez les montants sur les factures, devis, bons de commande et autres pi√®ces.',
        obligatoire: true,
        ordre: 1
      },
      {
        id: '13000000-0000-0000-0000-000000000002',
        categorie_id: '10000000-0000-0000-0000-000000000003',
        nom: 'Exactitude des calculs',
        description: 'V√©rifier l\'exactitude de tous les calculs effectu√©s',
        question: 'Tous les calculs sont-ils exacts (TVA, remises, totaux) ?',
        aide: 'Recalculez les montants HT, TVA, remises et totaux pour v√©rifier leur exactitude.',
        obligatoire: true,
        ordre: 2
      },
      
      // V√©rifications de Conformit√©
      {
        id: '14000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000004',
        nom: 'Respect des d√©lais r√©glementaires',
        description: 'V√©rifier le respect des d√©lais l√©gaux et r√©glementaires',
        question: 'Les d√©lais r√©glementaires ont-ils √©t√© respect√©s ?',
        aide: 'Contr√¥lez les d√©lais de paiement, de prescription et autres √©ch√©ances l√©gales.',
        obligatoire: true,
        ordre: 1
      },
      {
        id: '14000000-0000-0000-0000-000000000002',
        categorie_id: '10000000-0000-0000-0000-000000000004',
        nom: 'Validation des autorisations',
        description: 'V√©rifier que toutes les autorisations n√©cessaires ont √©t√© obtenues',
        question: 'Toutes les autorisations n√©cessaires ont-elles √©t√© obtenues ?',
        aide: 'Contr√¥lez les visas, autorisations pr√©alables et validations requises.',
        obligatoire: true,
        ordre: 2
      }
    ]
    
    const { error: insertError } = await supabase
      .from('verifications_ordonnateur_types')
      .upsert(verifications, { onConflict: 'id' })
    
    if (insertError) {
      console.error('‚ùå Erreur insertion v√©rifications:', insertError)
    } else {
      console.log(`‚úÖ ${verifications.length} v√©rifications ins√©r√©es`)
    }

    // 6. Test final des relations
    console.log('\n6. üîç Test des relations...')
    
    const { data: testRelations, error: testError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select(`
        nom,
        verifications:verifications_ordonnateur_types(nom, obligatoire)
      `)
    
    if (testError) {
      console.error('‚ùå Erreur test relations:', testError)
    } else {
      console.log('‚úÖ Relations fonctionnelles :')
      testRelations?.forEach(cat => {
        console.log(`  - ${cat.nom}: ${cat.verifications?.length || 0} v√©rifications`)
      })
    }

    console.log('\nüéâ Contraintes et donn√©es ajout√©es avec succ√®s !')
    return true

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

async function main() {
  const success = await addForeignKeys()
  
  if (success) {
    console.log('\n‚úÖ Script termin√© avec succ√®s')
    process.exit(0)
  } else {
    console.log('\n‚ùå Script termin√© avec des erreurs')
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}
