#!/usr/bin/env node

/**
 * Script simple pour cr√©er les tables des v√©rifications ordonnateur
 * Utilise des requ√™tes SQL simples une par une
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env' })

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function createTables() {
  console.log('üöÄ Cr√©ation des tables des v√©rifications ordonnateur...\n')

  try {
    // 1. Cr√©er la table des cat√©gories
    console.log('1. üìã Cr√©ation de la table categories_verifications_ordonnateur...')
    
    const createCategoriesSQL = `
      CREATE TABLE IF NOT EXISTS categories_verifications_ordonnateur (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        nom TEXT NOT NULL,
        description TEXT,
        icone TEXT,
        couleur TEXT,
        ordre INTEGER NOT NULL,
        actif BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `
    
    const { error: catError } = await supabase.rpc('exec_sql', { sql: createCategoriesSQL })
    if (catError) {
      console.error('‚ùå Erreur cr√©ation cat√©gories:', catError)
      return false
    }
    console.log('‚úÖ Table categories_verifications_ordonnateur cr√©√©e')

    // 2. Cr√©er la table des types de v√©rifications
    console.log('\n2. üìã Cr√©ation de la table verifications_ordonnateur_types...')
    
    const createVerificationsSQL = `
      CREATE TABLE IF NOT EXISTS verifications_ordonnateur_types (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        categorie_id UUID NOT NULL,
        nom TEXT NOT NULL,
        description TEXT,
        question TEXT NOT NULL,
        aide TEXT,
        obligatoire BOOLEAN DEFAULT true,
        ordre INTEGER NOT NULL,
        actif BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `
    
    const { error: verifError } = await supabase.rpc('exec_sql', { sql: createVerificationsSQL })
    if (verifError) {
      console.error('‚ùå Erreur cr√©ation v√©rifications:', verifError)
      return false
    }
    console.log('‚úÖ Table verifications_ordonnateur_types cr√©√©e')

    // 3. Cr√©er la table des validations
    console.log('\n3. üìã Cr√©ation de la table validations_verifications_ordonnateur...')
    
    const createValidationsSQL = `
      CREATE TABLE IF NOT EXISTS validations_verifications_ordonnateur (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        dossier_id TEXT NOT NULL,
        verification_id UUID NOT NULL,
        valide BOOLEAN NOT NULL,
        commentaire TEXT,
        piece_justificative_reference TEXT,
        valide_par TEXT NOT NULL,
        valide_le TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `
    
    const { error: validError } = await supabase.rpc('exec_sql', { sql: createValidationsSQL })
    if (validError) {
      console.error('‚ùå Erreur cr√©ation validations:', validError)
      return false
    }
    console.log('‚úÖ Table validations_verifications_ordonnateur cr√©√©e')

    // 4. Cr√©er la table des synth√®ses
    console.log('\n4. üìã Cr√©ation de la table syntheses_verifications_ordonnateur...')
    
    const createSynthesesSQL = `
      CREATE TABLE IF NOT EXISTS syntheses_verifications_ordonnateur (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        dossier_id TEXT NOT NULL UNIQUE,
        total_verifications INTEGER NOT NULL DEFAULT 0,
        verifications_validees INTEGER NOT NULL DEFAULT 0,
        verifications_rejetees INTEGER NOT NULL DEFAULT 0,
        commentaire_general TEXT,
        statut TEXT NOT NULL CHECK (statut IN ('EN_COURS', 'VALID√â', 'REJET√â')) DEFAULT 'EN_COURS',
        valide_par TEXT NOT NULL,
        valide_le TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `
    
    const { error: synthError } = await supabase.rpc('exec_sql', { sql: createSynthesesSQL })
    if (synthError) {
      console.error('‚ùå Erreur cr√©ation synth√®ses:', synthError)
      return false
    }
    console.log('‚úÖ Table syntheses_verifications_ordonnateur cr√©√©e')

    // 5. Ins√©rer les cat√©gories
    console.log('\n5. üìä Insertion des cat√©gories...')
    
    const categories = [
      {
        id: '10000000-0000-0000-0000-000000000001',
        nom: 'V√©rifications de L√©galit√©',
        description: 'Contr√¥les de conformit√© aux textes l√©gaux et r√©glementaires',
        icone: 'gavel',
        couleur: 'blue',
        ordre: 1
      },
      {
        id: '10000000-0000-0000-0000-000000000002',
        nom: 'V√©rifications de Service Fait',
        description: 'Contr√¥les de justification et certification du service rendu',
        icone: 'check-circle',
        couleur: 'green',
        ordre: 2
      },
      {
        id: '10000000-0000-0000-0000-000000000003',
        nom: 'V√©rifications de Montants',
        description: 'Contr√¥les de coh√©rence et exactitude des montants',
        icone: 'calculator',
        couleur: 'orange',
        ordre: 3
      },
      {
        id: '10000000-0000-0000-0000-000000000004',
        nom: 'V√©rifications de Conformit√©',
        description: 'Contr√¥les de respect des proc√©dures et d√©lais',
        icone: 'clipboard-check',
        couleur: 'purple',
        ordre: 4
      }
    ]
    
    const { error: insertCatError } = await supabase
      .from('categories_verifications_ordonnateur')
      .upsert(categories, { onConflict: 'id' })
    
    if (insertCatError) {
      console.error('‚ùå Erreur insertion cat√©gories:', insertCatError)
      return false
    }
    console.log(`‚úÖ ${categories.length} cat√©gories ins√©r√©es`)

    // 6. Ins√©rer les v√©rifications (quelques exemples pour commencer)
    console.log('\n6. üìä Insertion des v√©rifications...')
    
    const verifications = [
      // L√©galit√©
      {
        id: '11000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000001',
        nom: 'Habilitation des autorit√©s administratives',
        description: 'V√©rifier que l\'autorit√© qui a initi√© la demande est habilit√©e √† le faire',
        question: 'L\'autorit√© administrative qui a initi√© cette demande est-elle habilit√©e √† le faire ?',
        aide: 'V√©rifiez les d√©l√©gations de pouvoir, les limites de comp√©tence et les habilitations en vigueur.',
        obligatoire: true,
        ordre: 1
      },
      {
        id: '11000000-0000-0000-0000-000000000002',
        categorie_id: '10000000-0000-0000-0000-000000000001',
        nom: 'Conformit√© aux textes l√©gaux',
        description: 'V√©rifier la conformit√© de l\'op√©ration aux textes l√©gaux et r√©glementaires',
        question: 'L\'op√©ration est-elle conforme aux textes l√©gaux et r√©glementaires en vigueur ?',
        aide: 'Consultez les lois, d√©crets et arr√™t√©s applicables √† ce type d\'op√©ration.',
        obligatoire: true,
        ordre: 2
      },
      // Service Fait
      {
        id: '12000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000002',
        nom: 'Justification du service rendu',
        description: 'V√©rifier que le service a bien √©t√© rendu conform√©ment aux sp√©cifications',
        question: 'Le service a-t-il √©t√© rendu conform√©ment aux sp√©cifications ?',
        aide: 'Examinez les preuves de r√©alisation : rapports, proc√®s-verbaux, attestations.',
        obligatoire: true,
        ordre: 1
      },
      // Montants
      {
        id: '13000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000003',
        nom: 'Coh√©rence des montants entre documents',
        description: 'V√©rifier la coh√©rence des montants entre tous les documents du dossier',
        question: 'Les montants sont-ils coh√©rents entre tous les documents du dossier ?',
        aide: 'Comparez les montants sur les factures, devis, bons de commande et autres pi√®ces.',
        obligatoire: true,
        ordre: 1
      },
      // Conformit√©
      {
        id: '14000000-0000-0000-0000-000000000001',
        categorie_id: '10000000-0000-0000-0000-000000000004',
        nom: 'Respect des d√©lais r√©glementaires',
        description: 'V√©rifier le respect des d√©lais l√©gaux et r√©glementaires',
        question: 'Les d√©lais r√©glementaires ont-ils √©t√© respect√©s ?',
        aide: 'Contr√¥lez les d√©lais de paiement, de prescription et autres √©ch√©ances l√©gales.',
        obligatoire: true,
        ordre: 1
      }
    ]
    
    const { error: insertVerifError } = await supabase
      .from('verifications_ordonnateur_types')
      .upsert(verifications, { onConflict: 'id' })
    
    if (insertVerifError) {
      console.error('‚ùå Erreur insertion v√©rifications:', insertVerifError)
      return false
    }
    console.log(`‚úÖ ${verifications.length} v√©rifications ins√©r√©es`)

    // 7. V√©rification finale
    console.log('\n7. üîç V√©rification finale...')
    
    const { data: finalCategories, error: finalCatError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select('*')
    
    const { data: finalVerifications, error: finalVerifError } = await supabase
      .from('verifications_ordonnateur_types')
      .select('*')
    
    if (finalCatError || finalVerifError) {
      console.error('‚ùå Erreur v√©rification finale')
      return false
    }
    
    console.log(`‚úÖ ${finalCategories?.length || 0} cat√©gories cr√©√©es`)
    console.log(`‚úÖ ${finalVerifications?.length || 0} v√©rifications cr√©√©es`)
    
    // Test des relations
    const { data: testRelations, error: relError } = await supabase
      .from('categories_verifications_ordonnateur')
      .select(`
        nom,
        verifications:verifications_ordonnateur_types(nom)
      `)
      .limit(2)
    
    if (relError) {
      console.warn('‚ö†Ô∏è Test relations √©chou√©:', relError)
    } else {
      console.log('‚úÖ Relations test√©es avec succ√®s')
      testRelations?.forEach(cat => {
        console.log(`  - ${cat.nom}: ${cat.verifications?.length || 0} v√©rifications`)
      })
    }

    console.log('\nüéâ Tables cr√©√©es avec succ√®s !')
    return true

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Ex√©cution du script
async function main() {
  const success = await createTables()
  
  if (success) {
    console.log('\n‚úÖ Script termin√© avec succ√®s')
    process.exit(0)
  } else {
    console.log('\n‚ùå Script termin√© avec des erreurs')
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = { createTables }
