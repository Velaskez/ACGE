const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function createNotificationsTable() {
  try {
    console.log('üîß Cr√©ation de la table notifications...')
    
    // 1. Cr√©er les types enum
    console.log('üìã 1. Cr√©ation des types enum...')
    
    const createTypesSQL = `
      -- Cr√©er le type enum pour les types de notifications
      DO $$ BEGIN
        CREATE TYPE notification_type AS ENUM (
          'INFO', 'WARNING', 'ERROR', 'SUCCESS', 'VALIDATION', 'REJECTION', 'APPROVAL', 'SYSTEM'
        );
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;

      -- Cr√©er le type enum pour les priorit√©s
      DO $$ BEGIN
        CREATE TYPE notification_priority AS ENUM (
          'LOW', 'MEDIUM', 'HIGH', 'URGENT'
        );
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `
    
    const { error: typesError } = await supabase.rpc('exec_sql', { sql: createTypesSQL })
    
    if (typesError) {
      console.warn('‚ö†Ô∏è Erreur cr√©ation types (peut-√™tre d√©j√† existants):', typesError.message)
    } else {
      console.log('‚úÖ Types enum cr√©√©s')
    }
    
    // 2. Cr√©er la table notifications
    console.log('üìã 2. Cr√©ation de la table notifications...')
    
    const createTableSQL = `
      -- Cr√©er la table notifications
      CREATE TABLE IF NOT EXISTS public.notifications (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id TEXT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
        title TEXT NOT NULL,
        message TEXT NOT NULL,
        type notification_type NOT NULL DEFAULT 'INFO',
        priority notification_priority NOT NULL DEFAULT 'MEDIUM',
        is_read BOOLEAN NOT NULL DEFAULT FALSE,
        read_at TIMESTAMP WITH TIME ZONE,
        expires_at TIMESTAMP WITH TIME ZONE,
        action_url TEXT,
        action_label TEXT,
        metadata JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
      );
    `
    
    const { error: tableError } = await supabase.rpc('exec_sql', { sql: createTableSQL })
    
    if (tableError) {
      console.warn('‚ö†Ô∏è Erreur cr√©ation table (peut-√™tre d√©j√† existante):', tableError.message)
    } else {
      console.log('‚úÖ Table notifications cr√©√©e')
    }
    
    // 3. Activer RLS
    console.log('üîí 3. Activation de RLS...')
    
    const enableRLSSQL = `ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;`
    
    const { error: rlsError } = await supabase.rpc('exec_sql', { sql: enableRLSSQL })
    
    if (rlsError) {
      console.warn('‚ö†Ô∏è Erreur activation RLS:', rlsError.message)
    } else {
      console.log('‚úÖ RLS activ√©')
    }
    
    // 4. Cr√©er les politiques RLS
    console.log('üõ°Ô∏è 4. Cr√©ation des politiques RLS...')
    
    const policiesSQL = `
      -- Politiques RLS
      -- Les utilisateurs peuvent voir leurs propres notifications
      DROP POLICY IF EXISTS "Users can view their own notifications" ON public.notifications;
      CREATE POLICY "Users can view their own notifications" ON public.notifications
        FOR SELECT TO authenticated
        USING (auth.uid()::text = user_id);

      -- Les utilisateurs peuvent marquer leurs propres notifications comme lues
      DROP POLICY IF EXISTS "Users can update their own notifications" ON public.notifications;
      CREATE POLICY "Users can update their own notifications" ON public.notifications
        FOR UPDATE TO authenticated
        USING (auth.uid()::text = user_id);

      -- Les admins peuvent ins√©rer des notifications pour n'importe quel utilisateur
      DROP POLICY IF EXISTS "Admins can insert notifications" ON public.notifications;
      CREATE POLICY "Admins can insert notifications" ON public.notifications
        FOR INSERT TO authenticated
        WITH CHECK (auth.jwt()->>'role' = 'ADMIN');

      -- Les admins peuvent supprimer n'importe quelle notification
      DROP POLICY IF EXISTS "Admins can delete notifications" ON public.notifications;
      CREATE POLICY "Admins can delete notifications" ON public.notifications
        FOR DELETE TO authenticated
        USING (auth.jwt()->>'role' = 'ADMIN');
    `
    
    const { error: policiesError } = await supabase.rpc('exec_sql', { sql: policiesSQL })
    
    if (policiesError) {
      console.warn('‚ö†Ô∏è Erreur cr√©ation politiques:', policiesError.message)
    } else {
      console.log('‚úÖ Politiques RLS cr√©√©es')
    }
    
    // 5. Cr√©er les fonctions RPC
    console.log('‚öôÔ∏è 5. Cr√©ation des fonctions RPC...')
    
    const functionsSQL = `
      -- Cr√©er des fonctions RPC pour la gestion des notifications
      CREATE OR REPLACE FUNCTION public.mark_notification_as_read(notification_id UUID)
      RETURNS VOID AS $$
      BEGIN
        UPDATE public.notifications
        SET is_read = TRUE, read_at = NOW(), updated_at = NOW()
        WHERE id = notification_id AND user_id = auth.uid()::text;
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER;

      CREATE OR REPLACE FUNCTION public.mark_all_notifications_as_read(user_id_param TEXT)
      RETURNS INTEGER AS $$
      DECLARE
        updated_count INTEGER;
      BEGIN
        UPDATE public.notifications
        SET is_read = TRUE, read_at = NOW(), updated_at = NOW()
        WHERE user_id = user_id_param AND is_read = FALSE
        RETURNING 1 INTO updated_count;
        RETURN updated_count;
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER;

      -- Fonction pour obtenir les statistiques de notifications d'un utilisateur
      CREATE OR REPLACE FUNCTION public.get_user_notification_stats(user_id_param TEXT)
      RETURNS TABLE (
        totalNotifications BIGINT,
        unreadCount BIGINT,
        highPriorityCount BIGINT,
        urgentCount BIGINT
      ) AS $$
      BEGIN
        RETURN QUERY
        SELECT
          COUNT(*)::BIGINT AS totalNotifications,
          COUNT(CASE WHEN NOT is_read THEN 1 END)::BIGINT AS unreadCount,
          COUNT(CASE WHEN priority = 'HIGH' AND NOT is_read THEN 1 END)::BIGINT AS highPriorityCount,
          COUNT(CASE WHEN priority = 'URGENT' AND NOT is_read THEN 1 END)::BIGINT AS urgentCount
        FROM public.notifications
        WHERE user_id = user_id_param AND (expires_at IS NULL OR expires_at > NOW());
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER;

      -- Grant permissions to the authenticated role for RPC functions
      GRANT EXECUTE ON FUNCTION public.mark_notification_as_read(UUID) TO authenticated;
      GRANT EXECUTE ON FUNCTION public.mark_all_notifications_as_read(TEXT) TO authenticated;
      GRANT EXECUTE ON FUNCTION public.get_user_notification_stats(TEXT) TO authenticated;
    `
    
    const { error: functionsError } = await supabase.rpc('exec_sql', { sql: functionsSQL })
    
    if (functionsError) {
      console.warn('‚ö†Ô∏è Erreur cr√©ation fonctions:', functionsError.message)
    } else {
      console.log('‚úÖ Fonctions RPC cr√©√©es')
    }
    
    // 6. Tester la table
    console.log('üß™ 6. Test de la table...')
    
    const { data: testData, error: testError } = await supabase
      .from('notifications')
      .select('*')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Erreur test table:', testError)
      return false
    }
    
    console.log('‚úÖ Table notifications accessible')
    
    // 7. Cr√©er une notification de test
    console.log('üîî 7. Cr√©ation d\'une notification de test...')
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, name, email')
      .eq('role', 'SECRETAIRE')
      .limit(1)
    
    if (usersError || !users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur secr√©taire trouv√©')
      return false
    }
    
    const testNotification = {
      user_id: users[0].id,
      title: 'Test - Syst√®me de notifications activ√©',
      message: 'Le syst√®me de notifications intelligentes est maintenant op√©rationnel ! Vous recevrez des notifications pour tous les √©v√©nements importants.',
      type: 'SUCCESS',
      priority: 'MEDIUM',
      action_url: '/secretaire-dashboard',
      action_label: 'Voir le dashboard'
    }
    
    const { data: insertedNotification, error: insertError } = await supabase
      .from('notifications')
      .insert(testNotification)
      .select()
    
    if (insertError) {
      console.error('‚ùå Erreur cr√©ation notification test:', insertError)
      return false
    }
    
    console.log('‚úÖ Notification de test cr√©√©e:', insertedNotification[0].id)
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Ex√©cuter la cr√©ation
async function main() {
  console.log('üéØ Cr√©ation de la table notifications')
  
  const success = await createNotificationsTable()
  
  if (success) {
    console.log('üéâ Table notifications cr√©√©e avec succ√®s!')
    console.log('üìã Prochaines √©tapes:')
    console.log('   1. Rafra√Æchissez votre interface secr√©taire (F5)')
    console.log('   2. Vous devriez voir la notification de test dans la sidebar')
    console.log('   3. Testez le rejet d\'un dossier depuis l\'interface CB')
    console.log('   4. V√©rifiez que la notification appara√Æt dans l\'interface secr√©taire')
  } else {
    console.log('‚ùå √âchec de la cr√©ation de la table notifications')
  }
}

main().catch(console.error)
