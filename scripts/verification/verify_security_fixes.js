const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

/**
 * Script pour v√©rifier que toutes les corrections de s√©curit√© ont √©t√© appliqu√©es
 * Date: 2025-01-29
 */

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement Supabase manquantes');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifySecurityFixes() {
    console.log('üîç V√©rification des corrections de s√©curit√©...');
    console.log('===============================================');

    let allTestsPassed = true;

    try {
        // 1. V√©rifier la fonction exec_sql avec search_path
        console.log('\n1Ô∏è‚É£ V√©rification de la fonction exec_sql...');
        
        const { data: execSqlTest, error: execSqlError } = await supabase.rpc('exec_sql', {
            sql: 'SELECT 1 as test'
        });

        if (execSqlError) {
            console.log('‚ùå Erreur avec exec_sql:', execSqlError.message);
            allTestsPassed = false;
        } else {
            console.log('‚úÖ Fonction exec_sql fonctionne correctement');
        }

        // 2. V√©rifier la fonction update_updated_at_column
        console.log('\n2Ô∏è‚É£ V√©rification de la fonction update_updated_at_column...');
        
        const { data: updateFunctionTest, error: updateFunctionError } = await supabase.rpc('exec_sql', {
            sql: 'SELECT proname, prosrc FROM pg_proc WHERE proname = \'update_updated_at_column\''
        });

        if (updateFunctionError) {
            console.log('‚ùå Erreur lors de la v√©rification de update_updated_at_column:', updateFunctionError.message);
            allTestsPassed = false;
        } else {
            console.log('‚úÖ Fonction update_updated_at_column trouv√©e');
        }

        // 3. V√©rifier la fonction check_password_strength
        console.log('\n3Ô∏è‚É£ V√©rification de la fonction check_password_strength...');
        
        const { data: passwordTest, error: passwordError } = await supabase.rpc('check_password_strength', {
            password: 'TestPassword123!'
        });

        if (passwordError) {
            console.log('‚ùå Erreur avec check_password_strength:', passwordError.message);
            allTestsPassed = false;
        } else {
            console.log('‚úÖ Fonction check_password_strength fonctionne correctement');
            console.log('   R√©sultat du test:', passwordTest[0]);
        }

        // 4. V√©rifier la fonction check_postgres_security_status
        console.log('\n4Ô∏è‚É£ V√©rification de la fonction check_postgres_security_status...');
        
        const { data: versionTest, error: versionError } = await supabase.rpc('check_postgres_security_status');

        if (versionError) {
            console.log('‚ùå Erreur avec check_postgres_security_status:', versionError.message);
            allTestsPassed = false;
        } else {
            console.log('‚úÖ Fonction check_postgres_security_status fonctionne correctement');
            console.log('   Version Postgres:', versionTest[0].version);
            console.log('   Recommandations:', versionTest[0].security_recommendations);
        }

        // 5. V√©rifier les configurations de s√©curit√© dans config.toml
        console.log('\n5Ô∏è‚É£ V√©rification des configurations de s√©curit√©...');
        
        const fs = require('fs');
        const configPath = 'supabase/config.toml';
        
        if (fs.existsSync(configPath)) {
            const configContent = fs.readFileSync(configPath, 'utf8');
            
            const securityChecks = [
                { name: 'OTP Expiry (5 minutes)', pattern: /otp_expiry = 300/ },
                { name: 'OTP Length (8 caract√®res)', pattern: /otp_length = 8/ },
                { name: 'Enable Confirmations', pattern: /enable_confirmations = true/ },
                { name: 'Secure Password Change', pattern: /secure_password_change = true/ },
                { name: 'Password Requirements', pattern: /password_requirements = "lower_upper_letters_digits_symbols"/ },
                { name: 'Minimum Password Length (8)', pattern: /minimum_password_length = 8/ },
                { name: 'Max Frequency (60s)', pattern: /max_frequency = "60s"/ }
            ];

            securityChecks.forEach(check => {
                if (check.pattern.test(configContent)) {
                    console.log(`‚úÖ ${check.name}: Configur√©`);
                } else {
                    console.log(`‚ùå ${check.name}: Non configur√©`);
                    allTestsPassed = false;
                }
            });
        } else {
            console.log('‚ö†Ô∏è  Fichier config.toml non trouv√©');
        }

        // 6. Test de s√©curit√© des fonctions avec search_path
        console.log('\n6Ô∏è‚É£ Test de s√©curit√© des fonctions...');
        
        const { data: securityTest, error: securityError } = await supabase.rpc('exec_sql', {
            sql: 'SELECT proname, prosrc FROM pg_proc WHERE proname IN (\'exec_sql\', \'update_updated_at_column\', \'check_password_strength\', \'check_postgres_security_status\')'
        });

        if (securityError) {
            console.log('‚ùå Erreur lors du test de s√©curit√©:', securityError.message);
            allTestsPassed = false;
        } else {
            console.log('‚úÖ Fonctions de s√©curit√© trouv√©es:');
            if (Array.isArray(securityTest)) {
                securityTest.forEach(func => {
                    const hasSearchPath = func.prosrc.includes('SET search_path');
                    console.log(`   ${func.proname}: ${hasSearchPath ? '‚úÖ search_path s√©curis√©' : '‚ùå search_path manquant'}`);
                    if (!hasSearchPath) allTestsPassed = false;
                });
            } else {
                console.log('   Aucune fonction trouv√©e ou format de r√©ponse inattendu');
            }
        }

        // R√©sum√© final
        console.log('\n' + '='.repeat(50));
        if (allTestsPassed) {
            console.log('üéâ TOUTES LES CORRECTIONS DE S√âCURIT√â SONT APPLIQU√âES !');
            console.log('\n‚úÖ R√©sum√© des corrections appliqu√©es:');
            console.log('   ‚Ä¢ Fonctions SQL corrig√©es avec search_path s√©curis√©');
            console.log('   ‚Ä¢ Fonction de v√©rification de la force des mots de passe');
            console.log('   ‚Ä¢ Fonction de v√©rification de la version Postgres');
            console.log('   ‚Ä¢ Configuration OTP s√©curis√©e (5 min, 8 caract√®res)');
            console.log('   ‚Ä¢ Confirmations email activ√©es');
            console.log('   ‚Ä¢ Changement de mot de passe s√©curis√© activ√©');
            console.log('   ‚Ä¢ Exigences de mot de passe strictes');
            console.log('\nüîí Votre application est maintenant plus s√©curis√©e !');
        } else {
            console.log('‚ö†Ô∏è  CERTAINES CORRECTIONS N√âCESSITENT UNE ATTENTION');
            console.log('\nVeuillez v√©rifier les √©l√©ments marqu√©s avec ‚ùå ci-dessus.');
        }

        console.log('\nüìã Prochaines √©tapes:');
        console.log('   1. V√©rifiez le Security Advisor dans le dashboard Supabase');
        console.log('   2. Testez les nouvelles fonctionnalit√©s de s√©curit√©');
        console.log('   3. Informez vos utilisateurs des nouvelles exigences de mot de passe');
        console.log('   4. Configurez un serveur SMTP pour les emails de confirmation');

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter le script
verifySecurityFixes();
