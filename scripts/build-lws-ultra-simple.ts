#!/usr/bin/env node

import { execSync } from 'child_process'
import { existsSync, rmSync, copyFileSync, writeFileSync } from 'fs'
import { join } from 'path'

console.log('üèóÔ∏è Construction ultra-simplifi√©e pour LWS...')

// 1. Nettoyer les builds pr√©c√©dents
const outDir = join(process.cwd(), 'out')
if (existsSync(outDir)) {
  rmSync(outDir, { recursive: true })
  console.log('‚úÖ Dossier out nettoy√©')
}

// 2. Cr√©er un fichier de configuration temporaire
const tempConfig = `import { NextConfig } from 'next';

const nextConfig: NextConfig = {
  // Configuration pour LWS (export statique)
  output: 'export',
  trailingSlash: true,
  distDir: 'out',
  
  // Exclure les scripts du linting pendant le build
  eslint: {
    ignoreDuringBuilds: true,
  },
  
  // Exclusions TypeScript
  typescript: {
    ignoreBuildErrors: true,
  },
  
  // Optimisations pour la production
  compress: true,
  poweredByHeader: false,
  
  // Configuration des images pour LWS
  images: {
    unoptimized: true, // N√©cessaire pour l'export statique
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
  },
  
  // Configuration exp√©rimentale
  experimental: {
    optimizePackageImports: ['lucide-react', '@radix-ui/react-icons'],
  },
  
  // Configuration webpack
  webpack: (config, { isServer }) => {
    // R√©soudre le probl√®me du loader
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
      };
    }
    return config;
  },
};

export default nextConfig;`

const configPath = join(process.cwd(), 'next.config.temp.ts')
writeFileSync(configPath, tempConfig)

// 3. Sauvegarder la config originale
const originalConfig = join(process.cwd(), 'next.config.ts')
const backupConfig = join(process.cwd(), 'next.config.backup.ts')

if (existsSync(originalConfig)) {
  copyFileSync(originalConfig, backupConfig)
  console.log('‚úÖ Configuration originale sauvegard√©e')
}

// 4. Appliquer la config temporaire
copyFileSync(configPath, originalConfig)
console.log('‚úÖ Configuration temporaire appliqu√©e')

// 5. Supprimer compl√®tement le dossier API
const apiDir = join(process.cwd(), 'src/app/api')
if (existsSync(apiDir)) {
  rmSync(apiDir, { recursive: true, force: true })
  console.log('‚úÖ Dossier API supprim√©')
}

// 6. Build de l'application
console.log('üì¶ Build de l\'application...')
try {
  execSync('npm run build', { stdio: 'inherit' })
  console.log('‚úÖ Build termin√©')
} catch (error) {
  console.error('‚ùå Erreur lors du build:', error)
  
  // Restaurer en cas d'erreur
  if (existsSync(backupConfig)) {
    copyFileSync(backupConfig, originalConfig)
    console.log('‚úÖ Configuration restaur√©e')
  }
  
  process.exit(1)
}

// 7. Restaurer la configuration originale
if (existsSync(backupConfig)) {
  copyFileSync(backupConfig, originalConfig)
  console.log('‚úÖ Configuration Vercel restaur√©e')
}

// 8. Nettoyer les fichiers temporaires
if (existsSync(configPath)) rmSync(configPath)
if (existsSync(backupConfig)) rmSync(backupConfig)

// 9. Cr√©er le fichier .htaccess pour LWS
const htaccessContent = `# Configuration pour Next.js sur LWS
RewriteEngine On

# Rediriger vers HTTPS
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Gestion des routes Next.js
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /$1 [L]

# Headers de s√©curit√©
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"

# Cache pour les assets statiques
<FilesMatch "\\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
    ExpiresActive On
    ExpiresDefault "access plus 1 year"
</FilesMatch>
`

const htaccessPath = join(outDir, '.htaccess')
writeFileSync(htaccessPath, htaccessContent)
console.log('‚úÖ .htaccess cr√©√©')

// 10. Cr√©er un guide d'upload
const uploadGuide = `# Guide d'upload vers LWS (Version Ultra-Simplifi√©e)

## ‚ö†Ô∏è IMPORTANT : Version statique uniquement

Cette version de l'application a √©t√© construite sans aucune API route.
Seules les pages statiques sont disponibles.

## üìÅ Fichiers √† uploader via FileZilla

1. **Connectez-vous √† votre serveur FTP LWS** :
   - Serveur : ftp.acge-gabon.com
   - Utilisateur : acgeg2647579
   - Mot de passe : Reviti2025@
   - Port : 21

2. **Naviguez vers le dossier public_html** (ou www)

3. **Upload tous les fichiers du dossier 'out'** :
   - Tous les fichiers HTML, CSS, JS
   - Le fichier .htaccess
   - Tous les dossiers (_next, etc.)

## üåê URLs de test

- **Accueil** : https://acge-gabon.com
- **Admin Setup** : https://acge-gabon.com/admin-setup

## ‚ö†Ô∏è Limitations

- ‚ùå Pas d'API routes (authentification, upload, etc.)
- ‚ùå Pas de fonctionnalit√©s dynamiques
- ‚ùå Pas de base de donn√©es
- ‚úÖ Pages statiques uniquement

## üîÑ Recommandation

Pour une version compl√®te avec toutes les fonctionnalit√©s, utilisez Vercel :
- D√©ploiement automatique
- API routes dynamiques
- Base de donn√©es MySQL
- Toutes les fonctionnalit√©s disponibles

## üìû Support

Si vous avez besoin de toutes les fonctionnalit√©s, revenez √† Vercel.
`

const guidePath = join(outDir, 'GUIDE_UPLOAD_LWS_ULTRA_SIMPLE.md')
writeFileSync(guidePath, uploadGuide)
console.log('‚úÖ Guide d\'upload cr√©√©')

console.log('\nüéâ Construction ultra-simplifi√©e termin√©e !')
console.log(`üìÅ Dossier de d√©ploiement : ${outDir}`)
console.log('\n‚ö†Ô∏è ATTENTION : Version statique uniquement')
console.log('üìã Prochaines √©tapes :')
console.log('1. Ouvrez FileZilla')
console.log('2. Connectez-vous √† votre serveur FTP LWS')
console.log('3. Upload le contenu du dossier out vers public_html')
console.log('4. Consultez le fichier GUIDE_UPLOAD_LWS_ULTRA_SIMPLE.md')
console.log('\nüí° Pour une version compl√®te, utilisez Vercel !')
