import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/lib/supabase-server'

/**
 * üîß ADMIN SUPABASE CONTROL - ACGE
 * 
 * Endpoint de d√©monstration du contr√¥le total de Supabase
 * Affiche toutes les capacit√©s d'administration disponibles
 */
export async function GET(request: NextRequest) {
  try {
    console.log('üîß D√©monstration du contr√¥le total Supabase...')
    
    const admin = getSupabaseAdmin()
    if (!admin) {
      return NextResponse.json(
        { error: 'Service Supabase Admin indisponible' },
        { status: 503 }
      )
    }

    // 1. Informations sur la base de donn√©es
    const { data: tables, error: tablesError } = await admin
      .from('information_schema.tables')
      .select('table_name, table_type')
      .eq('table_schema', 'public')
      .limit(20)

    // 2. Statistiques des utilisateurs
    const { data: users, error: usersError } = await admin
      .from('users')
      .select('id, name, email, role, createdAt')
      .order('createdAt', { ascending: false })

    // 3. Statistiques des dossiers
    const { data: folders, error: foldersError } = await admin
      .from('folders')
      .select('id, name, statut, createdAt')
      .order('createdAt', { ascending: false })
      .limit(10)

    // 4. Statistiques des documents
    const { data: documents, error: documentsError } = await admin
      .from('documents')
      .select('id, name, type, createdAt')
      .order('createdAt', { ascending: false })
      .limit(10)

    // 5. Statistiques des notifications
    const { data: notifications, error: notificationsError } = await admin
      .from('notifications')
      .select('id, type, message, createdAt, read')
      .order('createdAt', { ascending: false })
      .limit(10)

    // 6. Test de permissions RLS
    const { data: rlsTest, error: rlsError } = await admin
      .from('users')
      .select('count')
      .limit(1)

    const capabilities = {
      // Capacit√©s de base de donn√©es
      database: {
        canConnect: !tablesError,
        tablesCount: tables?.length || 0,
        tables: tables?.map(t => t.table_name) || [],
        error: tablesError?.message
      },
      
      // Capacit√©s utilisateurs
      users: {
        canRead: !usersError,
        count: users?.length || 0,
        users: users?.map(u => ({
          id: u.id,
          name: u.name,
          email: u.email,
          role: u.role,
          createdAt: u.createdAt
        })) || [],
        error: usersError?.message
      },
      
      // Capacit√©s dossiers
      folders: {
        canRead: !foldersError,
        count: folders?.length || 0,
        recent: folders?.map(f => ({
          id: f.id,
          name: f.name,
          statut: f.statut,
          createdAt: f.createdAt
        })) || [],
        error: foldersError?.message
      },
      
      // Capacit√©s documents
      documents: {
        canRead: !documentsError,
        count: documents?.length || 0,
        recent: documents?.map(d => ({
          id: d.id,
          name: d.name,
          type: d.type,
          createdAt: d.createdAt
        })) || [],
        error: documentsError?.message
      },
      
      // Capacit√©s notifications
      notifications: {
        canRead: !notificationsError,
        count: notifications?.length || 0,
        recent: notifications?.map(n => ({
          id: n.id,
          type: n.type,
          message: n.message,
          read: n.read,
          createdAt: n.createdAt
        })) || [],
        error: notificationsError?.message
      },
      
      // Capacit√©s RLS
      rls: {
        canBypass: !rlsError,
        error: rlsError?.message
      }
    }

    // Actions administratives possibles
    const adminActions = [
      'Cr√©er/modifier/supprimer des utilisateurs',
      'G√©rer les r√¥les et permissions',
      'Acc√©der √† toutes les donn√©es (bypass RLS)',
      'G√©rer les dossiers et documents',
      'Contr√¥ler les notifications',
      'Ex√©cuter des requ√™tes SQL arbitraires',
      'G√©rer les politiques de s√©curit√©',
      'Acc√©der aux logs et m√©triques',
      'G√©rer les extensions et fonctions',
      'Contr√¥ler les triggers et proc√©dures'
    ]

    console.log('‚úÖ Contr√¥le total Supabase d√©montr√© avec succ√®s')

    return NextResponse.json({
      success: true,
      message: 'Contr√¥le total de Supabase d√©montr√©',
      timestamp: new Date().toISOString(),
      capabilities,
      adminActions,
      summary: {
        totalTables: capabilities.database.tablesCount,
        totalUsers: capabilities.users.count,
        totalFolders: capabilities.folders.count,
        totalDocuments: capabilities.documents.count,
        totalNotifications: capabilities.notifications.count,
        rlsBypass: capabilities.rls.canBypass
      }
    })

  } catch (error) {
    console.error('‚ùå Erreur contr√¥le Supabase:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Erreur lors de la d√©monstration du contr√¥le Supabase',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    )
  }
}
