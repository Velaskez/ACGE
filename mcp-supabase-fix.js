// Script utilisant le MCP Supabase pour corriger le probl√®me folderId
const { spawn } = require('child_process');
const path = require('path');
require('dotenv').config();

const fixWithMCPSupabase = async () => {
  try {
    console.log('üîß === CORRECTION VIA MCP SUPABASE ===');
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('‚ùå Variables d\'environnement manquantes');
      return;
    }
    
    // Chemin vers le MCP Supabase construit
    const mcpPath = path.join(__dirname, 'temp-supabase-mcp', 'packages', 'mcp-server-supabase', 'dist', 'index.js');
    
    console.log('‚úÖ MCP Supabase trouv√©:', mcpPath);
    
    // SQL √† ex√©cuter
    const sqlQuery = `
      -- V√©rifier la structure actuelle
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'dossiers' 
      AND column_name IN ('folderId', 'folderName')
      ORDER BY column_name;
      
      -- Ajouter les colonnes folderId et folderName √† la table dossiers
      ALTER TABLE dossiers 
      ADD COLUMN IF NOT EXISTS folderId UUID REFERENCES folders(id) ON DELETE SET NULL,
      ADD COLUMN IF NOT EXISTS folderName TEXT;
      
      -- Cr√©er un index sur folderId pour les performances
      CREATE INDEX IF NOT EXISTS idx_dossiers_folder_id ON dossiers(folderId);
      
      -- Commentaire sur les nouvelles colonnes
      COMMENT ON COLUMN dossiers.folderId IS 'ID du dossier parent dans la table folders';
      COMMENT ON COLUMN dossiers.folderName IS 'Nom du dossier parent pour affichage rapide';
      
      -- V√©rifier que les colonnes ont √©t√© ajout√©es
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'dossiers' 
      AND column_name IN ('folderId', 'folderName')
      ORDER BY column_name;
    `;
    
    // Cr√©er un script temporaire pour ex√©cuter le MCP
    const mcpScript = `
      const { createClient } = require('@supabase/supabase-js');
      
      const supabaseUrl = '${supabaseUrl}';
      const supabaseServiceKey = '${supabaseServiceKey}';
      
      const supabase = createClient(supabaseUrl, supabaseServiceKey);
      
      const executeSQL = async () => {
        try {
          console.log('üîß Ex√©cution du SQL via MCP Supabase...');
          
          // Ex√©cuter le SQL
          const { data, error } = await supabase.rpc('exec', {
            sql: \`${sqlQuery}\`
          });
          
          if (error) {
            console.log('‚ùå Erreur SQL:', error.message);
            
            // Essayer une approche alternative avec des requ√™tes s√©par√©es
            console.log('üîÑ Tentative avec des requ√™tes s√©par√©es...');
            
            const queries = [
              "ALTER TABLE dossiers ADD COLUMN IF NOT EXISTS folderId UUID REFERENCES folders(id) ON DELETE SET NULL",
              "ALTER TABLE dossiers ADD COLUMN IF NOT EXISTS folderName TEXT",
              "CREATE INDEX IF NOT EXISTS idx_dossiers_folder_id ON dossiers(folderId)",
              "COMMENT ON COLUMN dossiers.folderId IS 'ID du dossier parent dans la table folders'",
              "COMMENT ON COLUMN dossiers.folderName IS 'Nom du dossier parent pour affichage rapide'"
            ];
            
            for (const query of queries) {
              try {
                const { error: queryError } = await supabase.rpc('exec', { sql: query });
                if (queryError) {
                  console.log('‚ö†Ô∏è  Erreur requ√™te:', query, '->', queryError.message);
                } else {
                  console.log('‚úÖ Requ√™te r√©ussie:', query);
                }
              } catch (err) {
                console.log('‚ùå Erreur ex√©cution:', query, '->', err.message);
              }
            }
          } else {
            console.log('‚úÖ SQL ex√©cut√© avec succ√®s:', data);
          }
          
          // Test final
          console.log('üß™ Test final...');
          const testDossier = {
            id: crypto.randomUUID(),
            numeroDossier: \`MCP-TEST-\${Date.now()}\`,
            numeroNature: 'MCP-TEST-NATURE',
            objetOperation: 'Test via MCP Supabase',
            beneficiaire: 'Test MCP Beneficiaire',
            posteComptableId: 'default-poste-id',
            natureDocumentId: 'default-nature-id',
            secretaireId: 'cmecmvbvy0000c1ecbq58lmtm',
            folderId: 'test-folder-mcp',
            folderName: 'Test Folder MCP',
            statut: 'EN_ATTENTE',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          };
          
          const { data: testResult, error: testError } = await supabase
            .from('dossiers')
            .insert(testDossier)
            .select();
          
          if (testError) {
            console.log('‚ùå Erreur test:', testError.message);
          } else {
            console.log('üéâ SUCC√àS: Test r√©ussi !');
            console.log('‚úÖ Dossier cr√©√©:', testResult[0].numeroDossier);
            
            // Nettoyer le test
            await supabase
              .from('dossiers')
              .delete()
              .eq('id', testResult[0].id);
            
            console.log('üßπ Test nettoy√©');
          }
          
        } catch (error) {
          console.error('‚ùå Erreur g√©n√©rale:', error);
        }
      };
      
      executeSQL();
    `;
    
    const scriptPath = path.join(__dirname, 'temp-mcp-script.js');
    require('fs').writeFileSync(scriptPath, mcpScript);
    
    console.log('üìù Script MCP cr√©√©, ex√©cution...');
    
    // Ex√©cuter le script
    const child = spawn('node', [scriptPath], {
      stdio: 'inherit',
      cwd: __dirname
    });
    
    child.on('close', (code) => {
      console.log(`\nüèÅ Script termin√© avec le code: ${code}`);
      
      // Nettoyer le script temporaire
      try {
        require('fs').unlinkSync(scriptPath);
        console.log('üßπ Script temporaire supprim√©');
      } catch (err) {
        console.log('‚ö†Ô∏è  Erreur suppression script:', err.message);
      }
    });
    
    child.on('error', (error) => {
      console.error('‚ùå Erreur ex√©cution script:', error);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
};

// Ex√©cuter le script
fixWithMCPSupabase();
