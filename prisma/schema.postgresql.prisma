generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  password         String
  role             String            @default("SECRETAIRE")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  comments         Comment[]
  sharedWith       DocumentShare[]
  documentVersions DocumentVersion[]
  documents        Document[]
  folders          Folder[]
  notifications    Notification[]

  @@map("users")
}

model Document {
  id               String            @id @default(cuid())
  title            String
  description      String?           @db.Text
  isPublic         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  currentVersionId String?           @unique
  authorId         String
  folderId         String?
  comments         Comment[]
  shares           DocumentShare[]
  versions         DocumentVersion[] @relation("DocumentVersions")
  author           User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  currentVersion   DocumentVersion?  @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  folder           Folder?           @relation(fields: [folderId], references: [id])
  tags             Tag[]             @relation("DocumentToTag")

  @@map("documents")
}

model DocumentVersion {
  id            String    @id @default(cuid())
  versionNumber Int       @default(1)
  fileName      String
  fileSize      Int
  fileType      String
  filePath      String    @db.Text
  changeLog     String?   @db.Text
  createdAt     DateTime  @default(now())
  documentId    String
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [id])
  document      Document  @relation("DocumentVersions", fields: [documentId], references: [id], onDelete: Cascade)
  isCurrentFor  Document? @relation("CurrentVersion")

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  parentId    String?
  documents   Document[]
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[]   @relation("FolderHierarchy")

  @@map("folders")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  color     String?
  createdAt DateTime   @default(now())
  documents Document[] @relation("DocumentToTag")

  @@map("tags")
}

model DocumentShare {
  id         String   @id @default(cuid())
  permission String
  createdAt  DateTime @default(now())
  documentId String
  userId     String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_shares")
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  documentId String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
