const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const admin = createClient(supabaseUrl, supabaseServiceKey);

async function testACDashboardComplete() {
  try {
    console.log('üß™ Test complet du dashboard AC...');
    
    // 1. V√©rifier les dossiers disponibles
    console.log('üìä 1. V√©rification des dossiers AC...');
    const response = await fetch('http://localhost:3000/api/dossiers/ac-all', {
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      console.error('‚ùå Erreur API ac-all:', response.status);
      return;
    }
    
    const data = await response.json();
    const dossiers = data.dossiers || [];
    
    console.log(`‚úÖ ${dossiers.length} dossiers trouv√©s pour l'AC`);
    
    // Analyser les statuts
    const statutsCount = {};
    dossiers.forEach(dossier => {
      statutsCount[dossier.statut] = (statutsCount[dossier.statut] || 0) + 1;
    });
    
    console.log('üìä R√©partition par statut:');
    Object.entries(statutsCount).forEach(([statut, count]) => {
      console.log(`  - ${statut}: ${count} dossier(s)`);
    });
    
    // 2. Tester le rapport de v√©rification
    if (dossiers.length > 0) {
      const premierDossier = dossiers[0];
      console.log(`\nüìã 2. Test du rapport de v√©rification pour ${premierDossier.numeroDossier}...`);
      
      const rapportResponse = await fetch(`http://localhost:3000/api/dossiers/${premierDossier.id}/rapport-verification`, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (rapportResponse.ok) {
        const rapportData = await rapportResponse.json();
        const rapport = rapportData.rapport;
        
        console.log('‚úÖ Rapport de v√©rification g√©n√©r√© avec succ√®s');
        console.log('üìä Statistiques rapport:');
        console.log(`  - CB: ${rapport.statistiquesGlobales.cb.total} contr√¥les (${rapport.statistiquesGlobales.cb.valides} valid√©s)`);
        console.log(`  - Ordonnateur: ${rapport.statistiquesGlobales.ordonnateur.total} v√©rifications (${rapport.statistiquesGlobales.ordonnateur.valides} valid√©es)`);
        console.log(`  - Incoh√©rences: ${rapport.statistiquesGlobales.incoherences}`);
      } else {
        console.error('‚ùå Erreur rapport de v√©rification:', rapportResponse.status);
      }
      
      // 3. Tester la g√©n√©ration de quitus (si valid√© d√©finitivement)
      if (premierDossier.statut === 'VALID√â_D√âFINITIVEMENT') {
        console.log(`\nüìÑ 3. Test de g√©n√©ration de quitus pour ${premierDossier.numeroDossier}...`);
        
        const quitusResponse = await fetch(`http://localhost:3000/api/dossiers/${premierDossier.id}/generate-quitus`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (quitusResponse.ok) {
          const quitusData = await quitusResponse.json();
          console.log('‚úÖ Quitus g√©n√©r√© avec succ√®s:', quitusData.quitus.numeroQuitus);
          console.log('üìã Contenu du quitus:');
          console.log(`  - Dossier: ${quitusData.quitus.dossier.numero}`);
          console.log(`  - B√©n√©ficiaire: ${quitusData.quitus.dossier.beneficiaire}`);
          console.log(`  - Conforme: ${quitusData.quitus.conclusion.conforme ? 'OUI' : 'NON'}`);
        } else {
          console.error('‚ùå Erreur g√©n√©ration quitus:', quitusResponse.status);
        }
      }
    }
    
    // 4. V√©rifier les APIs sp√©cifiques
    console.log(`\nüîç 4. V√©rification des APIs sp√©cifiques...`);
    
    const apis = [
      { name: 'AC Pending', url: 'http://localhost:3000/api/dossiers/ac-pending' },
      { name: 'AC All', url: 'http://localhost:3000/api/dossiers/ac-all' }
    ];
    
    for (const api of apis) {
      try {
        const testResponse = await fetch(api.url, {
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (testResponse.ok) {
          const testData = await testResponse.json();
          console.log(`‚úÖ ${api.name}: ${testData.dossiers?.length || 0} dossiers`);
        } else {
          console.error(`‚ùå ${api.name}: Erreur ${testResponse.status}`);
        }
      } catch (error) {
        console.error(`‚ùå ${api.name}: Erreur de connexion`);
      }
    }
    
    console.log('\nüéâ Test complet du dashboard AC termin√© avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testACDashboardComplete();
