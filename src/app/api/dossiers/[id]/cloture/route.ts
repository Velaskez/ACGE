import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/lib/supabase-server'
import { NotificationsByRole } from '@/lib/notifications-by-role'

/**
 * üîí API CL√îTURE DOSSIER - ACGE
 * 
 * Cl√¥ture un dossier par l'Agent Comptable
 */
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params
    const id = resolvedParams.id
    
    console.log('üîí Cl√¥ture dossier:', id)
    
    const body = await request.json()
    const { commentaire } = body
    
    const admin = getSupabaseAdmin()
    
    if (!admin) {
      return NextResponse.json(
        { error: 'Service de base de donn√©es indisponible' },
        { status: 503 }
      )
    }
    
    // R√©cup√©rer le dossier avec toutes les informations
    const { data: dossier, error: fetchError } = await admin
      .from('dossiers')
      .select(`
        *,
        poste_comptable:posteComptableId(*),
        nature_document:natureDocumentId(*),
        secretaire:secretaireId(id, name, email)
      `)
      .eq('id', id)
      .single()

    if (fetchError) {
      return NextResponse.json(
        { error: 'Dossier non trouv√©' },
        { status: 404 }
      )
    }

    // V√©rifier que le dossier est comptabilis√©
    if (dossier.statut !== 'COMPTABILIS√â') {
      return NextResponse.json(
        { error: 'Seuls les dossiers comptabilis√©s peuvent √™tre cl√¥tur√©s' },
        { status: 400 }
      )
    }

    // Mettre √† jour le statut du dossier
    const { data: updatedDossier, error: updateError } = await admin
      .from('dossiers')
      .update({
        statut: 'CL√îTUR√â',
        clotureComment: commentaire?.trim() || null,
        cloturedAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })
      .eq('id', id)
      .select(`
        *,
        poste_comptable:posteComptableId(*),
        nature_document:natureDocumentId(*),
        secretaire:secretaireId(id, name, email)
      `)
      .single()

    if (updateError) {
      console.error('‚ùå Erreur cl√¥ture dossier:', updateError)
      return NextResponse.json(
        { error: 'Erreur lors de la cl√¥ture' },
        { status: 500 }
      )
    }

    console.log('üîí Dossier cl√¥tur√© avec succ√®s:', updatedDossier.numeroDossier)
    
    // üîî NOTIFICATIONS INTELLIGENTES PAR R√îLE
    try {
      // Notifier la secr√©taire
      if (dossier.secretaire?.id) {
        await NotificationsByRole.notifySecretaire({
          userId: dossier.secretaire.id,
          dossierId: dossier.id,
          numeroDossier: dossier.numeroDossier,
          action: 'dossier_comptabilized' // Utiliser le m√™me type pour la cl√¥ture
        })
        console.log('üîî Notification envoy√©e √† la secr√©taire')
      }

      // Notifier l'agent comptable
      const { data: acUsers } = await admin
        .from('users')
        .select('id')
        .eq('role', 'AGENT_COMPTABLE')
        .limit(1)

      if (acUsers && acUsers.length > 0) {
        await NotificationsByRole.notifyAgentComptable({
          userId: acUsers[0].id,
          dossierId: dossier.id,
          numeroDossier: dossier.numeroDossier,
          action: 'dossier_clotured'
        })
        console.log('üîî Notification envoy√©e √† l\'agent comptable')
      }

      // Notifier l'admin pour suivi
      const { data: adminUsers } = await admin
        .from('users')
        .select('id')
        .eq('role', 'ADMIN')
        .limit(1)

      if (adminUsers && adminUsers.length > 0) {
        await NotificationsByRole.notifyAdmin({
          userId: adminUsers[0].id,
          action: 'system_alert',
          details: `Dossier ${dossier.numeroDossier} cl√¥tur√© avec succ√®s`,
          metadata: {
            dossierId: dossier.id,
            numeroDossier: dossier.numeroDossier,
            cloturedAt: new Date().toISOString()
          }
        })
        console.log('üîî Notification envoy√©e √† l\'admin')
      }

    } catch (notificationError) {
      console.warn('‚ö†Ô∏è Erreur envoi notifications:', notificationError)
      // Ne pas faire √©chouer la cl√¥ture pour une erreur de notification
    }
    
    return NextResponse.json({ 
      success: true,
      dossier: updatedDossier,
      message: 'Dossier cl√¥tur√© avec succ√®s'
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la cl√¥ture du dossier:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erreur lors de la cl√¥ture du dossier',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      }, 
      { status: 500 }
    )
  }
}
