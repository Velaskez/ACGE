const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function createPendingDossierAndTestAPI() {
  try {
    console.log('üß™ Cr√©ation d\'un dossier en attente et test de l\'API...')
    
    // 1. R√©cup√©rer un utilisateur secr√©taire
    console.log('üë§ 1. R√©cup√©ration d\'un utilisateur secr√©taire...')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, name, email, role')
      .eq('role', 'SECRETAIRE')
      .limit(1)
    
    if (usersError || !users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur secr√©taire trouv√©:', usersError)
      return false
    }
    
    const secretaire = users[0]
    console.log(`‚úÖ Secr√©taire: ${secretaire.name} (${secretaire.email})`)
    
    // 2. R√©cup√©rer un poste comptable et une nature de document
    console.log('üìä 2. R√©cup√©ration des donn√©es comptables...')
    const { data: postesComptables, error: postesError } = await supabase
      .from('postes_comptables')
      .select('id, numero, intitule')
      .limit(1)
    
    const { data: natureDocuments, error: natureError } = await supabase
      .from('natures_documents')
      .select('id, numero, nom')
      .limit(1)
    
    if (postesError || !postesComptables || postesComptables.length === 0) {
      console.error('‚ùå Aucun poste comptable trouv√©:', postesError)
      return false
    }
    
    if (natureError || !natureDocuments || natureDocuments.length === 0) {
      console.error('‚ùå Aucune nature de document trouv√©e:', natureError)
      return false
    }
    
    const posteComptable = postesComptables[0]
    const natureDocument = natureDocuments[0]
    
    console.log(`‚úÖ Poste comptable: ${posteComptable.numero} - ${posteComptable.intitule}`)
    console.log(`‚úÖ Nature document: ${natureDocument.numero} - ${natureDocument.nom}`)
    
    // 3. Cr√©er un dossier en attente
    console.log('üìÅ 3. Cr√©ation d\'un dossier en attente...')
    const testDossier = {
      id: `test-pending-${Date.now()}`,
      numeroDossier: `DOSS-ACGE-PENDING-${Date.now()}`,
      numeroNature: 'NATURE-PENDING-001',
      objetOperation: 'Test API de rejet',
      beneficiaire: 'Test B√©n√©ficiaire API',
      posteComptableId: posteComptable.id,
      natureDocumentId: natureDocument.id,
      secretaireId: secretaire.id,
      statut: 'EN_ATTENTE',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
    
    const { data: insertedDossier, error: insertError } = await supabase
      .from('dossiers')
      .insert(testDossier)
      .select(`
        *,
        poste_comptable:posteComptableId(*),
        nature_document:natureDocumentId(*),
        secretaire:secretaireId(id, name, email)
      `)
      .single()
    
    if (insertError) {
      console.error('‚ùå Erreur cr√©ation dossier:', insertError)
      return false
    }
    
    console.log(`‚úÖ Dossier cr√©√©: ${insertedDossier.numeroDossier}`)
    
    // 4. Attendre que l'application d√©marre
    console.log('‚è≥ 4. Attente du d√©marrage de l\'application...')
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    // 5. Tester l'API de rejet
    console.log('‚ùå 5. Test de l\'API de rejet...')
    
    const rejectionData = {
      reason: 'Test API - Documents manquants',
      details: 'Test des pi√®ces justificatives manquantes via API.'
    }
    
    try {
      const response = await fetch(`http://localhost:3001/api/dossiers/${insertedDossier.id}/reject`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(rejectionData)
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        console.error('‚ùå Erreur API rejet:', errorData)
        return false
      }
      
      const result = await response.json()
      console.log('‚úÖ API rejet r√©ussie:', result.message)
      
    } catch (fetchError) {
      console.error('‚ùå Erreur fetch API:', fetchError)
      return false
    }
    
    // 6. V√©rifier que le dossier a √©t√© rejet√©
    console.log('üìã 6. V√©rification du statut du dossier...')
    
    const { data: updatedDossier, error: checkError } = await supabase
      .from('dossiers')
      .select('*')
      .eq('id', insertedDossier.id)
      .single()
    
    if (checkError) {
      console.error('‚ùå Erreur v√©rification dossier:', checkError)
      return false
    }
    
    console.log(`‚úÖ Statut du dossier: ${updatedDossier.statut}`)
    console.log(`‚úÖ Motif de rejet: ${updatedDossier.rejectionReason}`)
    
    // 7. V√©rifier les notifications
    console.log('üîî 7. V√©rification des notifications...')
    
    const { data: notifications, error: notificationsError } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', secretaire.id)
      .order('created_at', { ascending: false })
    
    if (notificationsError) {
      console.error('‚ùå Erreur r√©cup√©ration notifications:', notificationsError)
      return false
    }
    
    console.log(`‚úÖ ${notifications.length} notifications trouv√©es`)
    
    // Afficher les notifications r√©centes
    notifications.slice(0, 3).forEach((notif, index) => {
      console.log(`   ${index + 1}. ${notif.title} (${notif.type}, ${notif.priority}) - ${notif.is_read ? 'Lue' : 'Non lue'}`)
    })
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Ex√©cuter le test
async function main() {
  console.log('üéØ Test complet: cr√©ation dossier en attente + test API rejet')
  
  const success = await createPendingDossierAndTestAPI()
  
  if (success) {
    console.log('‚úÖ Test r√©ussi!')
    console.log('üìã Instructions:')
    console.log('   1. Rafra√Æchissez la page de l\'interface secr√©taire (F5)')
    console.log('   2. V√©rifiez la section "Notifications" dans la sidebar')
    console.log('   3. Vous devriez voir la notification de rejet')
    console.log('   4. V√©rifiez la page "Mes Dossiers Rejet√©s" pour voir le dossier rejet√©')
  } else {
    console.log('‚ùå Le test a √©chou√©. V√©rifiez les logs ci-dessus.')
  }
}

main().catch(console.error)
