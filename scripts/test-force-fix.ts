#!/usr/bin/env npx tsx

console.log('üí™ Test correction forc√©e avec approche directe PostgreSQL...\n')

const APP_URL = 'https://acge-zeta.vercel.app'

async function forceFixRLS() {
  console.log('üöÄ √âtape 1: Force disable RLS avec client PostgreSQL direct...')
  
  try {
    const response = await fetch(`${APP_URL}/api/force-disable-rls`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Force disable RLS r√©ussi !')
      console.log('üìä R√©sultats:')
      data.results.forEach((result: string) => console.log('  ', result))
      return true
    } else {
      const error = await response.json()
      console.log('‚ùå Erreur force disable:', error)
      return false
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau:', error)
    return false
  }
}

async function restartDB() {
  console.log('\nüîÑ √âtape 2: Red√©marrage des connexions Prisma...')
  
  try {
    const response = await fetch(`${APP_URL}/api/restart-db`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Connexions red√©marr√©es !')
      console.log('üë• Nombre d\'utilisateurs:', data.userCount)
      return true
    } else {
      const error = await response.json()
      console.log('‚ùå Erreur restart:', error)
      return false
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau restart:', error)
    return false
  }
}

async function testHealthAfterFix() {
  console.log('\nüè• √âtape 3: Test de sant√© apr√®s correction...')
  
  try {
    const response = await fetch(`${APP_URL}/api/health`)
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Health check OK !')
      console.log('üìä Statut:', data.status)
      return true
    } else {
      console.log('‚ùå Health check failed - Status:', response.status)
      const text = await response.text()
      console.log('   Error:', text.substring(0, 200))
      return false
    }
  } catch (error) {
    console.log('‚ùå Erreur health check:', error)
    return false
  }
}

async function testDashboardAPIs() {
  console.log('\nüìä √âtape 4: Test final des APIs dashboard...')
  
  // D'abord se connecter
  try {
    const loginResponse = await fetch(`${APP_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@acge.ga',
        password: 'admin123'
      })
    })

    if (!loginResponse.ok) {
      console.log('‚ùå Connexion impossible - Admin inexistant')
      return false
    }

    const setCookie = loginResponse.headers.get('set-cookie')
    if (!setCookie || !setCookie.includes('auth-token=')) {
      console.log('‚ùå Pas de token d\'auth')
      return false
    }

    const match = setCookie.match(/auth-token=([^;]+)/)
    const token = match ? match[1] : null
    
    if (!token) {
      console.log('‚ùå Token invalide')
      return false
    }

    console.log('‚úÖ Connexion admin OK')

    // Maintenant tester les APIs critiques
    const apis = [
      { name: 'Dashboard Stats', url: '/api/dashboard/stats' },
      { name: 'Dashboard Activity', url: '/api/dashboard/activity' },
      { name: 'Notifications', url: '/api/notifications' }
    ]

    let successCount = 0

    for (const api of apis) {
      try {
        console.log(`üîç Test ${api.name}...`)
        
        const response = await fetch(`${APP_URL}${api.url}`, {
          headers: { 'Cookie': `auth-token=${token}` }
        })
        
        if (response.ok) {
          const data = await response.json()
          console.log(`‚úÖ ${api.name} - Status 200 üéâ`)
          console.log(`   Data preview: ${JSON.stringify(data).substring(0, 80)}...`)
          successCount++
        } else {
          console.log(`‚ùå ${api.name} - Status ${response.status}`)
          if (response.status === 500) {
            const text = await response.text()
            console.log(`   500 Details: ${text.substring(0, 150)}...`)
          }
        }
      } catch (error) {
        console.log(`‚ùå ${api.name} - Erreur: ${error}`)
      }
    }

    console.log(`\nüéØ R√âSULTAT APIS: ${successCount}/${apis.length} fonctionnelles`)
    return successCount === apis.length

  } catch (error) {
    console.log('‚ùå Erreur test APIs:', error)
    return false
  }
}

async function main() {
  console.log('üí™ CORRECTION FORC√âE SUPABASE RLS')
  console.log('=' .repeat(60))
  console.log('‚è≥ Attente d√©ploiement (30 secondes)...\n')
  
  await new Promise(resolve => setTimeout(resolve, 30000))
  
  // 1. Force disable RLS avec client PostgreSQL direct
  const rlsFixed = await forceFixRLS()
  if (!rlsFixed) {
    console.log('\n‚ùå √âchec force disable RLS')
    return
  }
  
  // 2. Red√©marrer les connexions Prisma
  const restarted = await restartDB()
  if (!restarted) {
    console.log('\n‚ö†Ô∏è Probl√®me restart, mais on continue...')
  }
  
  // 3. Test sant√©
  const healthy = await testHealthAfterFix()
  if (!healthy) {
    console.log('\n‚ö†Ô∏è Health check √©chou√©, mais on teste les APIs...')
  }
  
  // 4. Test final APIs
  const apisWork = await testDashboardAPIs()
  
  // R√©sultat final
  console.log('\n' + '=' .repeat(60))
  if (apisWork) {
    console.log('üéâ SUCC√àS COMPLET ! PROBL√àMES SUPABASE R√âSOLUS !')
    console.log('‚úÖ RLS d√©sactiv√© avec client PostgreSQL direct')
    console.log('‚úÖ Cache Prisma contourn√©')
    console.log('‚úÖ Toutes les APIs dashboard fonctionnent')
    console.log('‚úÖ Erreurs 500 corrig√©es d√©finitivement')
    console.log('\nüåê Application pleinement op√©rationnelle :')
    console.log('   URL: https://acge-zeta.vercel.app/login')
    console.log('   Email: admin@acge.ga')
    console.log('   Mot de passe: admin123')
    console.log('\nüöÄ Vous pouvez maintenant utiliser l\'application normalement !')
  } else {
    console.log('‚ö†Ô∏è Correction partielle - V√©rifiez manuellement les APIs')
  }
}

main().catch(console.error)
