const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testCompleteNotifications() {
  try {
    console.log('üß™ Test complet du syst√®me de notifications...')
    
    // 1. R√©cup√©rer un utilisateur secr√©taire
    console.log('üë§ 1. R√©cup√©ration d\'un utilisateur secr√©taire...')
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, name, email')
      .eq('role', 'SECRETAIRE')
      .limit(1)
    
    if (usersError || !users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur secr√©taire trouv√©:', usersError)
      return false
    }
    
    const secretaire = users[0]
    console.log(`‚úÖ Secr√©taire: ${secretaire.name} (${secretaire.email}) - ID: ${secretaire.id}`)
    
    // 2. Tester l'API de r√©cup√©ration des notifications
    console.log('üì• 2. Test de l\'API de r√©cup√©ration des notifications...')
    
    try {
      const response = await fetch('http://localhost:3000/api/notifications', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': secretaire.id
        }
      })
      
      if (!response.ok) {
        console.error('‚ùå Erreur API notifications:', response.status, response.statusText)
        return false
      }
      
      const apiData = await response.json()
      console.log('‚úÖ API notifications fonctionne!')
      console.log(`üìä ${apiData.notifications?.length || 0} notifications, ${apiData.stats?.unreadCount || 0} non lues`)
      
      // 3. Tester l'API de marquage d'une notification comme lue
      if (apiData.notifications && apiData.notifications.length > 0) {
        const firstNotification = apiData.notifications[0]
        console.log(`üîî 3. Test de marquage de la notification "${firstNotification.title}"...`)
        
        const markResponse = await fetch('http://localhost:3000/api/notifications/mark-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-user-id': secretaire.id
          },
          body: JSON.stringify({ notificationId: firstNotification.id })
        })
        
        if (!markResponse.ok) {
          console.error('‚ùå Erreur API mark-read:', markResponse.status, markResponse.statusText)
          return false
        }
        
        const markData = await markResponse.json()
        console.log('‚úÖ Notification marqu√©e comme lue:', markData.success)
        
        // 4. V√©rifier que la notification est bien marqu√©e comme lue
        console.log('üîç 4. V√©rification du marquage...')
        
        const verifyResponse = await fetch('http://localhost:3000/api/notifications', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'x-user-id': secretaire.id
          }
        })
        
        if (verifyResponse.ok) {
          const verifyData = await verifyResponse.json()
          const markedNotification = verifyData.notifications.find(n => n.id === firstNotification.id)
          
          if (markedNotification && markedNotification.is_read) {
            console.log('‚úÖ Notification confirm√©e comme lue dans la base de donn√©es')
          } else {
            console.log('‚ö†Ô∏è Notification pas encore marqu√©e comme lue')
          }
          
          console.log(`üìä Nouvelles stats: ${verifyData.stats?.unreadCount || 0} non lues`)
        }
      }
      
      // 5. Tester l'API de marquage de toutes les notifications comme lues
      console.log('üìù 5. Test de marquage de toutes les notifications comme lues...')
      
      const markAllResponse = await fetch('http://localhost:3000/api/notifications/mark-all-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': secretaire.id
        }
      })
      
      if (!markAllResponse.ok) {
        console.error('‚ùå Erreur API mark-all-read:', markAllResponse.status, markAllResponse.statusText)
        return false
      }
      
      const markAllData = await markAllResponse.json()
      console.log(`‚úÖ ${markAllData.count} notifications marqu√©es comme lues`)
      
      // 6. V√©rification finale
      console.log('üîç 6. V√©rification finale...')
      
      const finalResponse = await fetch('http://localhost:3000/api/notifications', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': secretaire.id
        }
      })
      
      if (finalResponse.ok) {
        const finalData = await finalResponse.json()
        console.log(`üìä Stats finales: ${finalData.stats?.unreadCount || 0} non lues`)
        
        if (finalData.stats?.unreadCount === 0) {
          console.log('üéâ Toutes les notifications sont marqu√©es comme lues!')
        }
      }
      
      return true
      
    } catch (fetchError) {
      console.error('‚ùå Erreur fetch API:', fetchError)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return false
  }
}

// Ex√©cuter le test
async function main() {
  console.log('üéØ Test complet du syst√®me de notifications')
  
  const success = await testCompleteNotifications()
  
  if (success) {
    console.log('üéâ Test complet r√©ussi! Le syst√®me de notifications fonctionne parfaitement!')
    console.log('üìã Prochaines √©tapes:')
    console.log('   1. Rafra√Æchissez votre interface secr√©taire (F5)')
    console.log('   2. Testez le clic sur les notifications dans la sidebar')
    console.log('   3. Les notifications devraient se marquer comme lues sans erreur')
    console.log('   4. Le compteur de notifications non lues devrait se mettre √† jour')
  } else {
    console.log('‚ùå Le test a √©chou√©. V√©rifiez les logs ci-dessus.')
  }
}

main().catch(console.error)
