import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import * as dotenv from 'dotenv'

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' })

const prisma = new PrismaClient()

async function createAdmin() {
  console.log('üîÑ Cr√©ation de l\'utilisateur administrateur...')
  
  try {
    // V√©rifier si l'admin existe d√©j√†
    const existingAdmin = await prisma.user.findUnique({
      where: { email: 'admin@acge-gabon.com' }
    })

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  L\'administrateur existe d√©j√†')
      return existingAdmin
    }

    // Cr√©er le mot de passe hash√©
    const hashedPassword = await bcrypt.hash('Admin@2024', 10)
    
    // Cr√©er l'utilisateur admin
    const admin = await prisma.user.create({
      data: {
        email: 'admin@acge-gabon.com',
        password: hashedPassword,
        name: 'Administrateur ACGE',
        role: 'ADMIN'
      }
    })

    console.log('‚úÖ Administrateur cr√©√© avec succ√®s')
    console.log('üìß Email: admin@acge-gabon.com')
    console.log('üîë Mot de passe: Admin@2024')
    
    return admin
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', error)
    throw error
  }
}

async function createSampleData() {
  console.log('\nüîÑ Cr√©ation des donn√©es d\'exemple...')
  
  try {
    // R√©cup√©rer l'admin
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@acge-gabon.com' }
    })

    if (!admin) {
      throw new Error('Admin non trouv√©')
    }

    // Cr√©er des dossiers d'exemple
    const folders = await Promise.all([
      prisma.folder.create({
        data: {
          name: 'Documents Administratifs',
          description: 'Documents officiels de l\'ACGE',
          authorId: admin.id
        }
      }),
      prisma.folder.create({
        data: {
          name: 'Rapports Financiers',
          description: 'Rapports et bilans financiers',
          authorId: admin.id
        }
      }),
      prisma.folder.create({
        data: {
          name: 'Ressources Humaines',
          description: 'Documents RH et personnel',
          authorId: admin.id
        }
      })
    ])

    console.log(`‚úÖ ${folders.length} dossiers cr√©√©s`)

    // Cr√©er des tags
    const tags = await Promise.all([
      prisma.tag.create({
        data: {
          name: 'Important',
          color: '#FF0000'
        }
      }),
      prisma.tag.create({
        data: {
          name: 'Urgent',
          color: '#FFA500'
        }
      }),
      prisma.tag.create({
        data: {
          name: 'Confidentiel',
          color: '#800080'
        }
      })
    ])

    console.log(`‚úÖ ${tags.length} tags cr√©√©s`)

    // Cr√©er des notifications d'exemple
    const notifications = await Promise.all([
      prisma.notification.create({
        data: {
          type: 'INFO',
          title: 'Bienvenue sur ACGE',
          message: 'Votre compte administrateur a √©t√© cr√©√© avec succ√®s. Vous pouvez maintenant g√©rer les documents et les utilisateurs.',
          userId: admin.id
        }
      }),
      prisma.notification.create({
        data: {
          type: 'SUCCESS',
          title: 'Migration r√©ussie',
          message: 'La migration vers Supabase a √©t√© effectu√©e avec succ√®s. Toutes les fonctionnalit√©s sont op√©rationnelles.',
          userId: admin.id
        }
      })
    ])

    console.log(`‚úÖ ${notifications.length} notifications cr√©√©es`)

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es d\'exemple:', error)
    throw error
  }
}

async function checkTables() {
  console.log('\nüîç V√©rification des tables...')
  
  try {
    const tables = [
      { name: 'users', count: await prisma.user.count() },
      { name: 'documents', count: await prisma.document.count() },
      { name: 'folders', count: await prisma.folder.count() },
      { name: 'tags', count: await prisma.tag.count() },
      { name: 'notifications', count: await prisma.notification.count() },
      { name: 'document_versions', count: await prisma.documentVersion.count() },
      { name: 'document_shares', count: await prisma.documentShare.count() },
      { name: 'comments', count: await prisma.comment.count() }
    ]

    console.log('\nüìä √âtat des tables:')
    tables.forEach(table => {
      console.log(`   ${table.name}: ${table.count} enregistrement(s)`)
    })

    return tables
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des tables:', error)
    throw error
  }
}

async function disableRLS() {
  console.log('\nüîì D√©sactivation de RLS pour les tables Prisma...')
  
  const tables = [
    'users',
    'documents',
    'document_versions',
    'folders',
    'tags',
    'document_shares',
    'comments',
    'notifications'
  ]

  try {
    for (const table of tables) {
      await prisma.$executeRawUnsafe(`ALTER TABLE ${table} DISABLE ROW LEVEL SECURITY;`)
      console.log(`   ‚úÖ RLS d√©sactiv√© pour: ${table}`)
    }
  } catch (error) {
    console.error('‚ö†Ô∏è  Erreur lors de la d√©sactivation de RLS (peut √™tre ignor√©e si les tables n\'existent pas encore):', error)
  }
}

async function main() {
  console.log('üöÄ MIGRATION VERS SUPABASE - ACGE')
  console.log('==================================\n')

  try {
    // V√©rifier la connexion
    console.log('üîå Test de connexion √† Supabase...')
    await prisma.$connect()
    console.log('‚úÖ Connexion √©tablie avec succ√®s\n')

    // D√©sactiver RLS si n√©cessaire
    await disableRLS()

    // Cr√©er l'admin
    await createAdmin()

    // Cr√©er les donn√©es d'exemple
    await createSampleData()

    // V√©rifier l'√©tat final
    await checkTables()

    console.log('\n‚ú® Migration termin√©e avec succ√®s!')
    console.log('\nüìù Prochaines √©tapes:')
    console.log('1. V√©rifier les donn√©es dans Prisma Studio: npx prisma studio')
    console.log('2. Tester la connexion en local: npm run dev')
    console.log('3. Configurer les variables sur Vercel')
    console.log('4. D√©ployer sur Vercel: git push')

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la migration:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter la migration
main()