// Diagnostic et correction PostgreSQL Authentication

import { execSync } from 'child_process'

async function fixPostgreSQLAuth() {
  console.log('üîß Diagnostic PostgreSQL Authentication\n')
  
  const psqlPath = '"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe"'
  
  try {
    // 1. V√©rifier le service PostgreSQL
    console.log('1. üîç V√©rification du service PostgreSQL...')
    try {
      const serviceStatus = execSync('sc query postgresql-x64-17', { encoding: 'utf8' })
      if (serviceStatus.includes('RUNNING')) {
        console.log('   ‚úÖ Service PostgreSQL en cours d\'ex√©cution')
      } else {
        console.log('   ‚ö†Ô∏è Service PostgreSQL non d√©marr√©')
        console.log('   üîß Tentative de d√©marrage...')
        execSync('net start postgresql-x64-17', { stdio: 'inherit' })
      }
    } catch (error) {
      console.log('   ‚ùå Probl√®me avec le service PostgreSQL')
    }
    
    // 2. Tenter diff√©rentes m√©thodes d'authentification
    console.log('\n2. üîë Test de diff√©rentes m√©thodes d\'authentification...\n')
    
    const passwords = [
      'Reviti2025@',
      '',              // Pas de mot de passe
      'postgres',      // Mot de passe par d√©faut
      'admin',         // Autre possibilit√©
      'password'       // Autre possibilit√©
    ]
    
    let workingPassword = null
    
    for (const pwd of passwords) {
      try {
        console.log(`   üß™ Test avec mot de passe: "${pwd || '(vide)'}"`)
        
        process.env.PGPASSWORD = pwd
        const result = execSync(`${psqlPath} -U postgres -d postgres -c "SELECT 'OK' as status;"`, { 
          encoding: 'utf8',
          stdio: 'pipe'
        })
        
        workingPassword = pwd
        console.log(`   ‚úÖ SUCC√àS avec le mot de passe: "${pwd || '(vide)'}"`)
        break
        
      } catch (error) {
        console.log(`   ‚ùå √âchec avec: "${pwd || '(vide)'}"`)
      }
    }
    
    if (workingPassword !== null) {
      console.log(`\nüéâ Mot de passe fonctionnel trouv√©: "${workingPassword || '(vide)'}"\n`)
      
      // Proc√©der √† l'import avec le bon mot de passe
      console.log('3. üì¶ Import des donn√©es avec le bon mot de passe...\n')
      
      process.env.PGPASSWORD = workingPassword
      
      try {
        // Cr√©er la base
        console.log('   üóÑÔ∏è Cr√©ation de la base acge_local...')
        execSync(`${psqlPath} -U postgres -c "DROP DATABASE IF EXISTS acge_local;"`, { stdio: 'pipe' })
        execSync(`${psqlPath} -U postgres -c "CREATE DATABASE acge_local;"`, { stdio: 'pipe' })
        console.log('   ‚úÖ Base cr√©√©e')
        
        // Import des donn√©es
        console.log('   üì¶ Import des donn√©es...')
        const backupFile = 'acge_backup_full_2025-08-12T12-15-18.sql'
        execSync(`${psqlPath} -U postgres -d acge_local -f ${backupFile}`, { stdio: 'pipe' })
        console.log('   ‚úÖ Donn√©es import√©es')
        
        // V√©rification
        console.log('   üîç V√©rification...')
        const verification = execSync(`${psqlPath} -U postgres -d acge_local -c "SELECT COUNT(*) as total_users FROM users;"`, { encoding: 'utf8' })
        console.log(`   ‚úÖ ${verification.trim()}`)
        
        // Configuration .env.local
        console.log('   ‚öôÔ∏è Configuration .env.local...')
        const fs = require('fs')
        
        let envContent = ''
        if (fs.existsSync('.env.local')) {
          envContent = fs.readFileSync('.env.local', 'utf8')
        }
        
        const newDatabaseUrl = `DATABASE_URL="postgresql://postgres:${workingPassword}@localhost:5432/acge_local"`
        
        if (envContent.includes('DATABASE_URL=')) {
          envContent = envContent.replace(/DATABASE_URL=.*/, newDatabaseUrl)
        } else {
          envContent += '\n' + newDatabaseUrl + '\n'
        }
        
        fs.writeFileSync('.env.local', envContent)
        console.log('   ‚úÖ .env.local configur√©')
        
        // Mettre √† jour Prisma
        console.log('   üîß Configuration Prisma...')
        let prismaSchema = fs.readFileSync('prisma/schema.prisma', 'utf8')
        prismaSchema = prismaSchema.replace(/provider = "sqlite"/, 'provider = "postgresql"')
        fs.writeFileSync('prisma/schema.prisma', prismaSchema)
        console.log('   ‚úÖ Schema Prisma mis √† jour')
        
        console.log('\nüéâ POSTGRESQL LOCAL CONFIGUR√â AVEC SUCC√àS!\n')
        
        console.log('‚úÖ R√âSULTATS:')
        console.log(`   üîë Mot de passe PostgreSQL: "${workingPassword || '(vide)'}"`)
        console.log('   üóÑÔ∏è Base acge_local cr√©√©e et peupl√©e')
        console.log('   ‚öôÔ∏è Application configur√©e pour PostgreSQL')
        console.log('   üîß Prisma mis √† jour pour PostgreSQL')
        
        console.log('\nüöÄ PROCHAINES √âTAPES:')
        console.log('   1. Red√©marrer l\'application: npm run dev')
        console.log('   2. Tester: npx tsx scripts/test-apis-with-current-setup.ts')
        console.log('   3. Acc√®s pgAdmin ou SQL Shell depuis le menu D√©marrer')
        
        // Cr√©er script de connexion
        const connectScript = `@echo off
echo üêò Connexion PostgreSQL Local - ACGE
set PGPASSWORD=${workingPassword}
${psqlPath} -U postgres -d acge_local
pause`
        
        fs.writeFileSync('connect_local_postgres.bat', connectScript)
        console.log('\nüì± Script cr√©√©: connect_local_postgres.bat')
        
      } catch (importError) {
        console.log('   ‚ùå Erreur lors de l\'import:', importError)
      }
      
    } else {
      console.log('\n‚ùå AUCUN MOT DE PASSE FONCTIONNEL TROUV√â\n')
      
      console.log('üí° SOLUTIONS POSSIBLES:\n')
      
      console.log('üîµ Option 1: R√©initialiser le mot de passe PostgreSQL')
      console.log('   1. Arr√™ter le service: net stop postgresql-x64-17')
      console.log('   2. Modifier pg_hba.conf pour "trust"')
      console.log('   3. Red√©marrer: net start postgresql-x64-17') 
      console.log('   4. Changer le mot de passe: ALTER USER postgres PASSWORD \'nouveau_mot_de_passe\';')
      console.log('')
      
      console.log('üîµ Option 2: R√©installer PostgreSQL')
      console.log('   1. D√©sinstaller PostgreSQL compl√®tement')
      console.log('   2. R√©installer avec un mot de passe simple (ex: postgres)')
      console.log('   3. Relancer cet import')
      console.log('')
      
      console.log('üîµ Option 3: Utiliser un service cloud (Recommand√©)')
      console.log('   1. Cr√©er un compte Supabase (gratuit)')
      console.log('   2. Obtenir l\'URL de connexion')
      console.log('   3. Importer le backup via l\'interface web')
      console.log('')
      
      console.log('üîµ Option 4: Continuer avec Docker (Fonctionne d√©j√†)')
      console.log('   1. Garder PostgreSQL Docker (pgAdmin: http://localhost:8080)')
      console.log('   2. Votre application fonctionne parfaitement avec Docker')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error)
  } finally {
    delete process.env.PGPASSWORD
  }
}

fixPostgreSQLAuth().catch(console.error)
