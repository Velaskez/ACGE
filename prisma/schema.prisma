// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  documents         Document[]
  documentVersions  DocumentVersion[]
  folders           Folder[]
  sharedWith        DocumentShare[]
  comments          Comment[]
  
  @@map("users")
}

model Document {
  id                String    @id @default(cuid())
  title             String
  description       String?
  isPublic          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Version actuelle (pour accès rapide)
  currentVersionId  String?  @unique
  currentVersion    DocumentVersion? @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  
  // Relations
  authorId          String
  author            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  folderId          String?
  folder            Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  // Toutes les versions de ce document
  versions          DocumentVersion[] @relation("DocumentVersions")
  
  tags              Tag[]
  shares            DocumentShare[]
  comments          Comment[]
  
  @@map("documents")
}

model DocumentVersion {
  id            String    @id @default(cuid())
  versionNumber Int       @default(1)
  fileName      String
  fileSize      Int
  fileType      String
  filePath      String
  changeLog     String?   // Description des changements
  createdAt     DateTime  @default(now())
  
  // Relations
  documentId    String
  document      Document  @relation("DocumentVersions", fields: [documentId], references: [id], onDelete: Cascade)
  
  // Qui a créé cette version
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [id])
  
  // Version actuelle (relation inverse)
  isCurrentFor  Document? @relation("CurrentVersion")
  
  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model Folder {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[]  @relation("FolderHierarchy")
  documents   Document[]
  
  @@map("folders")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  color     String?
  createdAt DateTime   @default(now())
  
  // Relations
  documents Document[]
  
  @@map("tags")
}

model DocumentShare {
  id         String   @id @default(cuid())
  permission String
  createdAt  DateTime @default(now())
  
  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, userId])
  @@map("document_shares")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

// Les enums ne sont pas supportés par SQLite
// Utilisation de chaînes à la place
// Valeurs possibles pour role: "ADMIN", "MANAGER", "USER"
// Valeurs possibles pour permission: "READ", "WRITE", "ADMIN"
