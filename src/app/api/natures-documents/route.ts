import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/lib/supabase-server'

// GET - R√©cup√©rer toutes les natures de documents
export async function GET(request: NextRequest) {
  try {
    console.log('üìÑ R√©cup√©ration natures documents - D√©but')

    const admin = getSupabaseAdmin()

    // R√©cup√©rer les natures de documents depuis la base de donn√©es
    const { data: naturesDocuments, error } = await admin
      .from('natures_documents')
      .select('*')
      .eq('isActive', true)
      .order('numero', { ascending: true })

    if (error) {
      console.error('Erreur Supabase:', error)
      // Fallback sur des donn√©es simul√©es si la table n'existe pas encore
      const fallbackData = [
        {
          id: 'nature_1',
          numero: 'NAT-001',
          nom: 'Facture',
          description: 'Document de facturation',
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: 'nature_2',
          numero: 'NAT-002',
          nom: 'Devis',
          description: 'Document de devis',
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: 'nature_3',
          numero: 'NAT-003',
          nom: 'Bon de commande',
          description: 'Document de commande',
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      ]
      
      console.log(`‚ö†Ô∏è Utilisation des donn√©es de fallback (${fallbackData.length} natures)`)
      return NextResponse.json({ naturesDocuments: fallbackData })
    }

    console.log(`‚úÖ ${naturesDocuments?.length || 0} natures de documents r√©cup√©r√©es`)

    return NextResponse.json({ naturesDocuments: naturesDocuments || [] })

  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des natures de documents:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}

// POST - Cr√©er une nouvelle nature de document
export async function POST(request: NextRequest) {
  try {
    console.log('üìÑ Cr√©ation nature document - D√©but')
    
    const body = await request.json()
    const { numero, nom, description, isActive = true } = body

    if (!numero || !nom) {
      return NextResponse.json(
        { error: 'Num√©ro et nom sont requis' },
        { status: 400 }
      )
    }

    // Simulation de cr√©ation
    const natureDocument = {
      id: 'nature_' + Date.now(),
      numero,
      nom,
      description,
      isActive,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    console.log(`‚úÖ Nature document cr√©√©e: ${natureDocument.numero}`)

    return NextResponse.json({ 
      success: true,
      natureDocument,
      message: 'Nature de document cr√©√©e avec succ√®s'
    })

  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la nature de document:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}

