// Export/Import PostgreSQL Docker vers Local - Option 1

import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

async function exportImportPostgreSQL() {
  console.log('üîÑ Export/Import PostgreSQL Docker ‚Üí Local\n')
  
  try {
    // 1. V√©rifier que PostgreSQL Docker est disponible
    console.log('1. üê≥ V√©rification PostgreSQL Docker...')
    try {
      execSync('docker exec acge-postgres pg_isready -U acge_user -d acge_database', { stdio: 'pipe' })
      console.log('   ‚úÖ PostgreSQL Docker op√©rationnel')
    } catch {
      console.log('   ‚ùå PostgreSQL Docker non disponible')
      console.log('   üí° D√©marrez avec: docker-compose up -d postgres')
      return
    }
    
    // 2. Export depuis Docker
    console.log('\n2. üì§ Export des donn√©es depuis Docker...')
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5)
    const backupFiles = {
      full: `acge_backup_full_${timestamp}.sql`,
      schema: `acge_backup_schema_${timestamp}.sql`,
      data: `acge_backup_data_${timestamp}.sql`
    }
    
    try {
      // Export complet (sch√©ma + donn√©es)
      console.log('   üì¶ Export complet (sch√©ma + donn√©es)...')
      execSync(`docker exec acge-postgres pg_dump -U acge_user acge_database > ${backupFiles.full}`, { stdio: 'inherit' })
      console.log(`   ‚úÖ Backup complet cr√©√©: ${backupFiles.full}`)
      
      // Export sch√©ma seulement
      console.log('   üèóÔ∏è Export sch√©ma uniquement...')
      execSync(`docker exec acge-postgres pg_dump -U acge_user -s acge_database > ${backupFiles.schema}`, { stdio: 'inherit' })
      console.log(`   ‚úÖ Backup sch√©ma cr√©√©: ${backupFiles.schema}`)
      
      // Export donn√©es seulement
      console.log('   üìä Export donn√©es uniquement...')
      execSync(`docker exec acge-postgres pg_dump -U acge_user -a acge_database > ${backupFiles.data}`, { stdio: 'inherit' })
      console.log(`   ‚úÖ Backup donn√©es cr√©√©: ${backupFiles.data}`)
      
    } catch (error) {
      console.log('   ‚ùå Erreur lors de l\'export:', error)
      return
    }
    
    // 3. V√©rifier les fichiers cr√©√©s
    console.log('\n3. üìã V√©rification des fichiers export√©s...')
    for (const [type, filename] of Object.entries(backupFiles)) {
      if (fs.existsSync(filename)) {
        const stats = fs.statSync(filename)
        console.log(`   ‚úÖ ${type.padEnd(8)}: ${filename} (${(stats.size / 1024).toFixed(2)} KB)`)
      } else {
        console.log(`   ‚ùå ${type.padEnd(8)}: ${filename} - Non trouv√©`)
      }
    }
    
    // 4. D√©tecter PostgreSQL local
    console.log('\n4. üîç D√©tection PostgreSQL local...')
    
    const possiblePaths = [
      'C:\\Program Files\\PostgreSQL\\16\\bin\\psql.exe',
      'C:\\Program Files\\PostgreSQL\\15\\bin\\psql.exe',
      'C:\\Program Files\\PostgreSQL\\14\\bin\\psql.exe',
      'C:\\Program Files\\PostgreSQL\\13\\bin\\psql.exe',
      'C:\\Program Files\\PostgreSQL\\12\\bin\\psql.exe',
      'psql' // Si dans le PATH
    ]
    
    let localPsql = null
    for (const psqlPath of possiblePaths) {
      try {
        const versionOutput = execSync(`"${psqlPath}" --version`, { encoding: 'utf8', stdio: 'pipe' })
        localPsql = psqlPath
        console.log(`   ‚úÖ PostgreSQL local trouv√©: ${psqlPath}`)
        console.log(`   üìã Version: ${versionOutput.trim()}`)
        break
      } catch {
        // Continue √† chercher
      }
    }
    
    if (!localPsql) {
      console.log('   ‚ùå PostgreSQL local non trouv√©')
      console.log('\nüí° SOLUTIONS:')
      console.log('   1. Installer PostgreSQL: https://www.postgresql.org/download/windows/')
      console.log('   2. Utiliser un service cloud (Supabase, Neon)')
      console.log('   3. Importer sur un autre serveur PostgreSQL')
      console.log('\nüìÅ Fichiers de backup cr√©√©s et pr√™ts √† utiliser:')
      Object.values(backupFiles).forEach(file => console.log(`      ${file}`))
      return
    }
    
    // 5. Instructions d'import
    console.log('\n5. üì• Instructions d\'import vers PostgreSQL local:\n')
    
    console.log('üîµ √âTAPE A: Cr√©er une base de donn√©es locale')
    console.log(`   "${localPsql}" -U postgres -c "CREATE DATABASE acge_local;"`)
    console.log('')
    
    console.log('üîµ √âTAPE B: Importer les donn√©es (choisissez une option)')
    console.log(`   # Option 1: Import complet (recommand√©)`)
    console.log(`   "${localPsql}" -U postgres -d acge_local -f ${backupFiles.full}`)
    console.log('')
    console.log(`   # Option 2: Import sch√©ma puis donn√©es`)
    console.log(`   "${localPsql}" -U postgres -d acge_local -f ${backupFiles.schema}`)
    console.log(`   "${localPsql}" -U postgres -d acge_local -f ${backupFiles.data}`)
    console.log('')
    
    console.log('üîµ √âTAPE C: Configurer votre application')
    console.log('   Modifier .env.local avec:')
    console.log('   DATABASE_URL="postgresql://postgres:VOTRE_MOT_DE_PASSE@localhost:5432/acge_local"')
    console.log('')
    
    // 6. Script d'import automatique
    console.log('6. üöÄ Script d\'import automatique cr√©√©...')
    
    const importScript = `
@echo off
echo üîÑ Import automatique PostgreSQL Docker vers Local
echo.

echo üìã √âtape 1: Cr√©ation de la base locale...
"${localPsql}" -U postgres -c "DROP DATABASE IF EXISTS acge_local;"
"${localPsql}" -U postgres -c "CREATE DATABASE acge_local;"
if %ERRORLEVEL% neq 0 (
    echo ‚ùå Erreur lors de la cr√©ation de la base
    pause
    exit /b 1
)
echo ‚úÖ Base acge_local cr√©√©e

echo.
echo üìã √âtape 2: Import des donn√©es...
"${localPsql}" -U postgres -d acge_local -f ${backupFiles.full}
if %ERRORLEVEL% neq 0 (
    echo ‚ùå Erreur lors de l'import
    pause
    exit /b 1
)
echo ‚úÖ Donn√©es import√©es avec succ√®s

echo.
echo üìã √âtape 3: V√©rification...
"${localPsql}" -U postgres -d acge_local -c "SELECT 'users' as table_name, COUNT(*) FROM users UNION SELECT 'documents', COUNT(*) FROM documents UNION SELECT 'folders', COUNT(*) FROM folders;"

echo.
echo üéâ Import termin√© avec succ√®s!
echo üí° N'oubliez pas de modifier DATABASE_URL dans .env.local
echo DATABASE_URL="postgresql://postgres:VOTRE_MOT_DE_PASSE@localhost:5432/acge_local"
pause
`
    
    const scriptPath = 'import_postgres_local.bat'
    fs.writeFileSync(scriptPath, importScript)
    console.log(`   ‚úÖ Script cr√©√©: ${scriptPath}`)
    console.log('   üíª Ex√©cutez ce script pour import automatique')
    
    console.log('\nüéØ R√âSUM√â:')
    console.log('‚úÖ Export depuis Docker: Termin√©')
    console.log('‚úÖ Fichiers de backup: Cr√©√©s')
    console.log('‚úÖ PostgreSQL local: D√©tect√©')
    console.log('‚úÖ Script d\'import: Pr√™t')
    console.log('')
    console.log('‚ñ∂Ô∏è PROCHAINES √âTAPES:')
    console.log('1. Ex√©cutez le script: import_postgres_local.bat')
    console.log('2. Ou suivez les instructions manuelles ci-dessus')
    console.log('3. Modifiez .env.local avec la nouvelle URL')
    console.log('4. Red√©marrez votre application')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du processus export/import:', error)
  }
}

exportImportPostgreSQL().catch(console.error)
