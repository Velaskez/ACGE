// Configuration compl√®te PostgreSQL Docker avec cr√©ation des tables

import { config } from 'dotenv'
import path from 'path'
import { execSync } from 'child_process'

async function setupPostgreSQLWithTables() {
  console.log('üêò Configuration PostgreSQL Docker avec tables\n')
  
  try {
    // 1. Charger les variables d'environnement
    const envPath = path.join(process.cwd(), '.env.local')
    config({ path: envPath })
    
    console.log('1. ‚öôÔ∏è Configuration environnement...')
    console.log(`   üìã DATABASE_URL: ${process.env.DATABASE_URL}`)
    
    // 2. Cr√©er les tables directement via SQL
    console.log('\n2. üìä Cr√©ation des tables via SQL...')
    
    const createTablesSQL = `
-- Cr√©ation des tables ACGE
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    name TEXT,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role TEXT DEFAULT 'SECRETAIRE',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS folders (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    "authorId" TEXT NOT NULL,
    "parentId" TEXT,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("authorId") REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY ("parentId") REFERENCES folders(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS documents (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    "isPublic" BOOLEAN DEFAULT FALSE,
    "authorId" TEXT NOT NULL,
    "folderId" TEXT,
    "currentVersionId" TEXT UNIQUE,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("authorId") REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY ("folderId") REFERENCES folders(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS document_versions (
    id TEXT PRIMARY KEY,
    "versionNumber" INTEGER DEFAULT 1,
    "fileName" TEXT NOT NULL,
    "fileSize" INTEGER NOT NULL,
    "fileType" TEXT NOT NULL,
    "filePath" TEXT NOT NULL,
    "changeLog" TEXT,
    "documentId" TEXT NOT NULL,
    "createdById" TEXT NOT NULL,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("documentId") REFERENCES documents(id) ON DELETE CASCADE,
    FOREIGN KEY ("createdById") REFERENCES users(id),
    UNIQUE ("documentId", "versionNumber")
);

-- Ajout de la contrainte pour currentVersionId
ALTER TABLE documents 
ADD CONSTRAINT fk_current_version 
FOREIGN KEY ("currentVersionId") REFERENCES document_versions(id);

-- Autres tables...
CREATE TABLE IF NOT EXISTS tags (
    id TEXT PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    color TEXT,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS document_shares (
    id TEXT PRIMARY KEY,
    permission TEXT NOT NULL,
    "documentId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("documentId") REFERENCES documents(id) ON DELETE CASCADE,
    FOREIGN KEY ("userId") REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE ("documentId", "userId")
);

CREATE TABLE IF NOT EXISTS comments (
    id TEXT PRIMARY KEY,
    content TEXT NOT NULL,
    "documentId" TEXT NOT NULL,
    "authorId" TEXT NOT NULL,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("documentId") REFERENCES documents(id) ON DELETE CASCADE,
    FOREIGN KEY ("authorId") REFERENCES users(id) ON DELETE CASCADE
);
`
    
    // √âcrire le script SQL dans un fichier temporaire
    const sqlFilePath = path.join(process.cwd(), 'temp_create_tables.sql')
    require('fs').writeFileSync(sqlFilePath, createTablesSQL)
    
    try {
      // Ex√©cuter le script SQL
      execSync(`docker exec -i acge-postgres psql -U acge_user -d acge_database < ${sqlFilePath}`, { 
        stdio: 'inherit'
      })
      console.log('   ‚úÖ Tables cr√©√©es avec succ√®s!')
    } catch (error) {
      console.log('   ‚ùå Erreur lors de la cr√©ation des tables')
      throw error
    } finally {
      // Nettoyer le fichier temporaire
      require('fs').unlinkSync(sqlFilePath)
    }
    
    // 3. Cr√©er un utilisateur admin
    console.log('\n3. üë§ Cr√©ation utilisateur admin...')
    const adminSQL = `
INSERT INTO users (id, email, password, name, role, "createdAt", "updatedAt") 
VALUES (
  'admin-postgres-001',
  'admin@test.com',
  '$2a$10$rZ/kR1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1K1',
  'Admin PostgreSQL',
  'ADMIN',
  CURRENT_TIMESTAMP,
  CURRENT_TIMESTAMP
) ON CONFLICT (email) DO NOTHING;
`
    
    try {
      execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${adminSQL.replace(/"/g, '\\"')}"`, {
        stdio: 'pipe'
      })
      console.log('   ‚úÖ Utilisateur admin cr√©√©')
    } catch (error) {
      console.log('   ‚ö†Ô∏è Utilisateur admin existe peut-√™tre d√©j√†')
    }
    
    // 4. Cr√©er des donn√©es de test
    console.log('\n4. üìÅ Cr√©ation donn√©es de test...')
    const testDataSQL = `
-- Dossier de test
INSERT INTO folders (id, name, description, "authorId", "createdAt", "updatedAt")
VALUES (
  'folder-postgres-001',
  'PostgreSQL Test Folder',
  'Dossier de test pour PostgreSQL Docker',
  'admin-postgres-001',
  CURRENT_TIMESTAMP,
  CURRENT_TIMESTAMP
) ON CONFLICT (id) DO NOTHING;

-- Document de test
INSERT INTO documents (id, title, description, "authorId", "folderId", "createdAt", "updatedAt")
VALUES (
  'doc-postgres-001',
  'PostgreSQL Test Document',
  'Document de test pour PostgreSQL Docker',
  'admin-postgres-001',
  'folder-postgres-001',
  CURRENT_TIMESTAMP,
  CURRENT_TIMESTAMP
) ON CONFLICT (id) DO NOTHING;

-- Version du document
INSERT INTO document_versions (id, "versionNumber", "fileName", "fileSize", "fileType", "filePath", "changeLog", "documentId", "createdById", "createdAt")
VALUES (
  'version-postgres-001',
  1,
  'postgres-test.txt',
  1024,
  'text/plain',
  '/postgres/test.txt',
  'Version PostgreSQL Docker',
  'doc-postgres-001',
  'admin-postgres-001',
  CURRENT_TIMESTAMP
) ON CONFLICT (id) DO NOTHING;

-- Lier la version courante au document
UPDATE documents 
SET "currentVersionId" = 'version-postgres-001' 
WHERE id = 'doc-postgres-001';
`
    
    try {
      execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${testDataSQL.replace(/"/g, '\\"')}"`, {
        stdio: 'pipe'
      })
      console.log('   ‚úÖ Donn√©es de test cr√©√©es')
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erreur lors de la cr√©ation des donn√©es de test:', error)
    }
    
    // 5. V√©rification finale
    console.log('\n5. üìä V√©rification...')
    try {
      const tables = execSync('docker exec acge-postgres psql -U acge_user -d acge_database -c "\\dt"', { encoding: 'utf8' })
      console.log('   ‚úÖ Tables cr√©√©es:')
      console.log(tables)
      
      const stats = execSync('docker exec acge-postgres psql -U acge_user -d acge_database -c "SELECT \'users\' as table_name, COUNT(*) as count FROM users UNION SELECT \'documents\', COUNT(*) FROM documents UNION SELECT \'folders\', COUNT(*) FROM folders ORDER BY table_name;"', { encoding: 'utf8' })
      console.log('   üìà Statistiques:')
      console.log(stats)
      
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erreur lors de la v√©rification')
    }
    
    console.log('\nüéâ PostgreSQL Docker configur√© avec succ√®s!')
    console.log('\nüåê ACC√àS √Ä VOS DONN√âES:\n')
    
    console.log('üîµ 1. pgAdmin (Interface Web)')
    console.log('   üì± URL: http://localhost:8080')
    console.log('   üë§ Email: admin@acge.local | üîë Password: admin123')
    console.log('   üîó Connexion √† la base:')
    console.log('      Host: acge-postgres | Port: 5432')
    console.log('      Database: acge_database | User: acge_user | Password: acge_password_dev')
    
    console.log('\nüîµ 2. Ligne de commande')
    console.log('   üíª Acc√®s interactif:')
    console.log('      docker exec -it acge-postgres psql -U acge_user -d acge_database')
    
    console.log('\nüîµ 3. Clients externes (DBeaver, etc.)')
    console.log('   üîó Param√®tres:')
    console.log('      Host: localhost | Port: 5432')
    console.log('      Database: acge_database | User: acge_user | Password: acge_password_dev')
    
    console.log('\nüîµ 4. Prisma Studio')
    console.log('   üé® Interface Prisma: npx prisma studio')
    console.log('   üì± URL: http://localhost:5555')
    
    console.log('\nüíæ COMMANDES DE BACKUP:')
    console.log('   # Backup complet')
    console.log('   docker exec acge-postgres pg_dump -U acge_user acge_database > backup_postgres.sql')
    console.log('')
    console.log('   # Restore')
    console.log('   docker exec -i acge-postgres psql -U acge_user acge_database < backup_postgres.sql')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
  }
}

setupPostgreSQLWithTables().catch(console.error)
