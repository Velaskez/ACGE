// Cr√©ation simple des tables PostgreSQL

import { execSync } from 'child_process'

async function createPostgresTables() {
  console.log('üêò Cr√©ation des tables PostgreSQL...\n')
  
  try {
    // Cr√©er les tables une par une
    console.log('1. üë• Cr√©ation table users...')
    const createUsers = `CREATE TABLE IF NOT EXISTS users (
      id TEXT PRIMARY KEY,
      name TEXT,
      email TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL,
      role TEXT DEFAULT 'USER',
      "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${createUsers}"`, { stdio: 'inherit' })
    console.log('   ‚úÖ Table users cr√©√©e')
    
    console.log('\n2. üìÅ Cr√©ation table folders...')
    const createFolders = `CREATE TABLE IF NOT EXISTS folders (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      "authorId" TEXT NOT NULL,
      "parentId" TEXT,
      "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${createFolders}"`, { stdio: 'inherit' })
    console.log('   ‚úÖ Table folders cr√©√©e')
    
    console.log('\n3. üìÑ Cr√©ation table documents...')
    const createDocuments = `CREATE TABLE IF NOT EXISTS documents (
      id TEXT PRIMARY KEY,
      title TEXT NOT NULL,
      description TEXT,
      "isPublic" BOOLEAN DEFAULT FALSE,
      "authorId" TEXT NOT NULL,
      "folderId" TEXT,
      "currentVersionId" TEXT,
      "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${createDocuments}"`, { stdio: 'inherit' })
    console.log('   ‚úÖ Table documents cr√©√©e')
    
    console.log('\n4. üìã Cr√©ation table document_versions...')
    const createVersions = `CREATE TABLE IF NOT EXISTS document_versions (
      id TEXT PRIMARY KEY,
      "versionNumber" INTEGER DEFAULT 1,
      "fileName" TEXT NOT NULL,
      "fileSize" INTEGER NOT NULL,
      "fileType" TEXT NOT NULL,
      "filePath" TEXT NOT NULL,
      "changeLog" TEXT,
      "documentId" TEXT NOT NULL,
      "createdById" TEXT NOT NULL,
      "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${createVersions}"`, { stdio: 'inherit' })
    console.log('   ‚úÖ Table document_versions cr√©√©e')
    
    // Ins√©rer un utilisateur admin
    console.log('\n5. üë§ Cr√©ation utilisateur admin...')
    const insertAdmin = `INSERT INTO users (id, email, password, name, role) 
      VALUES ('admin-pg-001', 'admin@test.com', 'admin123', 'Admin PostgreSQL', 'ADMIN') 
      ON CONFLICT (email) DO NOTHING;`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${insertAdmin}"`, { stdio: 'inherit' })
    console.log('   ‚úÖ Utilisateur admin cr√©√©')
    
    // Ins√©rer des donn√©es de test
    console.log('\n6. üìä Cr√©ation donn√©es de test...')
    const insertFolder = `INSERT INTO folders (id, name, description, "authorId") 
      VALUES ('folder-pg-001', 'PostgreSQL Folder', 'Dossier de test PostgreSQL', 'admin-pg-001')
      ON CONFLICT (id) DO NOTHING;`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${insertFolder}"`, { stdio: 'inherit' })
    
    const insertDoc = `INSERT INTO documents (id, title, description, "authorId", "folderId") 
      VALUES ('doc-pg-001', 'PostgreSQL Document', 'Document de test PostgreSQL', 'admin-pg-001', 'folder-pg-001')
      ON CONFLICT (id) DO NOTHING;`
    
    execSync(`docker exec acge-postgres psql -U acge_user -d acge_database -c "${insertDoc}"`, { stdio: 'inherit' })
    console.log('   ‚úÖ Donn√©es de test cr√©√©es')
    
    // V√©rification
    console.log('\n7. üîç V√©rification des tables...')
    const listTables = execSync('docker exec acge-postgres psql -U acge_user -d acge_database -c "\\dt"', { encoding: 'utf8' })
    console.log(listTables)
    
    const countData = execSync('docker exec acge-postgres psql -U acge_user -d acge_database -c "SELECT \'users\' as table_name, COUNT(*) FROM users UNION SELECT \'documents\', COUNT(*) FROM documents UNION SELECT \'folders\', COUNT(*) FROM folders;"', { encoding: 'utf8' })
    console.log('üìä Donn√©es dans les tables:')
    console.log(countData)
    
    console.log('\nüéâ PostgreSQL configur√© avec succ√®s!')
    console.log('\nüåê ACC√àS √Ä VOS DONN√âES:\n')
    
    console.log('üîµ pgAdmin: http://localhost:8080')
    console.log('   üë§ admin@acge.local / admin123')
    console.log('   üîó Puis connecter: acge-postgres:5432, acge_database, acge_user, acge_password_dev')
    
    console.log('\nüîµ Ligne de commande:')
    console.log('   docker exec -it acge-postgres psql -U acge_user -d acge_database')
    
    console.log('\nüîµ Clients externes:')
    console.log('   Host: localhost:5432, DB: acge_database, User: acge_user, Pass: acge_password_dev')
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  }
}

createPostgresTables().catch(console.error)
