#!/usr/bin/env tsx

import { prisma } from '../src/lib/db'

async function testDocumentPreviewSimple() {
  console.log('üîç Test diagnostic aper√ßu documents (sans Supabase)')
  console.log('==================================================')
  
  try {
    // 1. V√©rifier la connexion √† la base de donn√©es
    console.log('\n1Ô∏è‚É£ Test connexion base de donn√©es...')
    await prisma.$connect()
    console.log('‚úÖ Connexion base de donn√©es OK')
    
    // 2. R√©cup√©rer tous les documents
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des documents...')
    const documents = await prisma.document.findMany({
      include: {
        currentVersion: true,
        author: true
      }
    })
    
    console.log(`üìÑ ${documents.length} document(s) trouv√©(s)`)
    
    if (documents.length === 0) {
      console.log('‚ö†Ô∏è Aucun document √† tester')
      return
    }
    
    // 3. Analyser chaque document
    console.log('\n3Ô∏è‚É£ Analyse des documents...')
    
    for (let i = 0; i < documents.length; i++) {
      const doc = documents[i]
      console.log(`\nüìÑ Document ${i + 1}/${documents.length}: ${doc.title}`)
      console.log(`   ID: ${doc.id}`)
      console.log(`   Auteur: ${doc.author?.name || 'N/A'} (ID: ${doc.authorId})`)
      
      if (!doc.currentVersion) {
        console.log('   ‚ùå Aucune version actuelle')
        continue
      }
      
      console.log(`   üìÅ Fichier: ${doc.currentVersion.fileName}`)
      console.log(`   üìÇ Chemin: ${doc.currentVersion.filePath}`)
      console.log(`   üìä Taille: ${doc.currentVersion.fileSize} bytes`)
      console.log(`   üè∑Ô∏è Type: ${doc.currentVersion.fileType}`)
      
      // Analyser le chemin du fichier
      const filePath = doc.currentVersion.filePath
      if (!filePath) {
        console.log('   ‚ùå Chemin de fichier manquant')
        continue
      }
      
      if (filePath.includes('supabase.co')) {
        console.log('   üîó URL Supabase d√©tect√©e')
        const urlParts = filePath.split('/')
        const fileName = urlParts[urlParts.length - 1]
        const userIdFromPath = urlParts[urlParts.length - 2]
        console.log(`   üìù Nom fichier extrait: ${fileName}`)
        console.log(`   üë§ User ID extrait: ${userIdFromPath}`)
        console.log(`   üîß Chemin relatif: ${userIdFromPath}/${fileName}`)
      } else if (filePath.includes('/')) {
        console.log('   üìÅ Chemin relatif d√©tect√©')
        const pathParts = filePath.split('/')
        console.log(`   üìù Nom fichier: ${pathParts[pathParts.length - 1]}`)
        console.log(`   üìÇ Dossier: ${pathParts.slice(0, -1).join('/')}`)
      } else {
        console.log('   üìÑ Nom de fichier simple')
      }
    }
    
    // 4. V√©rifier les probl√®mes potentiels
    console.log('\n4Ô∏è‚É£ Diagnostic des probl√®mes...')
    
    const problems = []
    
    // Documents sans version
    const docsWithoutVersion = documents.filter(d => !d.currentVersion)
    if (docsWithoutVersion.length > 0) {
      problems.push(`${docsWithoutVersion.length} document(s) sans version actuelle`)
      docsWithoutVersion.forEach(doc => {
        console.log(`   - ${doc.title} (ID: ${doc.id})`)
      })
    }
    
    // Documents avec chemin manquant
    const docsWithMissingPath = documents.filter(d => 
      d.currentVersion && (!d.currentVersion.filePath || d.currentVersion.filePath.trim() === '')
    )
    if (docsWithMissingPath.length > 0) {
      problems.push(`${docsWithMissingPath.length} document(s) avec chemin de fichier manquant`)
      docsWithMissingPath.forEach(doc => {
        console.log(`   - ${doc.title} (ID: ${doc.id})`)
      })
    }
    
    // Documents avec taille 0
    const docsWithZeroSize = documents.filter(d => 
      d.currentVersion && d.currentVersion.fileSize === 0
    )
    if (docsWithZeroSize.length > 0) {
      problems.push(`${docsWithZeroSize.length} document(s) avec taille 0`)
      docsWithZeroSize.forEach(doc => {
        console.log(`   - ${doc.title} (ID: ${doc.id})`)
      })
    }
    
    // Documents sans type MIME
    const docsWithoutMimeType = documents.filter(d => 
      d.currentVersion && (!d.currentVersion.fileType || d.currentVersion.fileType.trim() === '')
    )
    if (docsWithoutMimeType.length > 0) {
      problems.push(`${docsWithoutMimeType.length} document(s) sans type MIME`)
      docsWithoutMimeType.forEach(doc => {
        console.log(`   - ${doc.title} (ID: ${doc.id})`)
      })
    }
    
    if (problems.length > 0) {
      console.log('\n‚ùå Probl√®mes d√©tect√©s:')
      problems.forEach(problem => console.log(`   - ${problem}`))
    } else {
      console.log('\n‚úÖ Aucun probl√®me structurel d√©tect√©')
    }
    
    // 5. Recommandations
    console.log('\n5Ô∏è‚É£ Recommandations...')
    
    if (docsWithoutVersion.length > 0) {
      console.log('üîß Pour les documents sans version:')
      console.log('   - V√©rifier le processus de cr√©ation de versions')
      console.log('   - S\'assurer que currentVersionId est correctement d√©fini')
    }
    
    if (docsWithMissingPath.length > 0) {
      console.log('üîß Pour les documents sans chemin:')
      console.log('   - V√©rifier le processus d\'upload')
      console.log('   - S\'assurer que filePath est sauvegard√© correctement')
    }
    
    console.log('\nüîß Pour r√©soudre l\'erreur d\'aper√ßu:')
    console.log('   1. Configurer Supabase Storage')
    console.log('   2. V√©rifier les variables d\'environnement Supabase')
    console.log('   3. Tester l\'acc√®s aux fichiers via l\'API Supabase')
    console.log('   4. V√©rifier les permissions RLS sur le bucket documents')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le test
testDocumentPreviewSimple()
  .then(() => {
    console.log('\n‚úÖ Test termin√©')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erreur fatale:', error)
    process.exit(1)
  })
